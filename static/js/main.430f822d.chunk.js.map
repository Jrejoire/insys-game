{"version":3,"sources":["components/SceneComponent.jsx","components/armies.js","components/Scene.js","App.js","serviceWorker.js","index.js"],"names":["props","reactCanvas","useRef","sceneOptions","antialias","engineOptions","adaptToDeviceRatio","onRender","rest","onSceneReady","useState","loaded","setLoaded","scene","setScene","useEffect","window","resize","getEngine","addEventListener","removeEventListener","engine","Engine","current","stencil","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","dispose","ref","armies","tabForces","units","soldier","class","move","defense","roll","success","melee","range","mods","s","m","l","xl","maxRange","maxInGame","undefined","cost","sysTroops","rebels","outerRing","voidWarriors","BABYLON","AllowMatricesInterpolation","canvas","getRenderingCanvas","camera","ToRadians","attachControl","angularsensibility","checkCollisions","ellipsoid","light","intensity","shadowGenerator","usePoissonSampling","hl","invisibleMaterial","alpha","transparentMaterial","skybox","CreateSphere","diameter","diameterX","skyboxMaterial","backFaceCulling","material","receiveShadows","background","CreateCylinder","height","tessellation","backgroundMaterial","opacityTexture","process","translate","Y","visibility","boardMaterial","diffuseTexture","bumpTexture","ambientTexture","groundMaterial","specularTexture","miniMaterial","diffuseColor","tokenMaterialBlack","tokenMaterialWhite","baseMaterialBlack","Black","baseMaterialWhite","White","diceMatWhite","diceMatBlack","gameAreaTemplate","moveAreaMat","CustomMaterial","Fragment_Custom_Diffuse","lineOfSightMatW","lineOfSightMMatW","lineOfSightLMatW","lineOfSightXLMatW","lineOfSightMatB","lineOfSightMMatB","lineOfSightLMatB","lineOfSightXLMatB","actionToken","dice1","dice2","dice3","dice4","dice5","dice6","players","teamWhite","player","army","this","minis","startActions","turnActions","reduce","acc","value","armyStats","teamBlack","currentPlayer","team","enemyPlayer","mapActionManager","moveActionManager","teamBlackActionManager","teamWhiteActionManager","importActionTokens","ImportMesh","newMeshes","MergeMeshes","position","scaling","name","id","actionClone","dx","x","NB_CLONES","nbclone","clone","randomX","Math","floor","random","z","dice","X","Z","getShadowMap","renderList","push","collisionGroup","collisionMask","setEnabled","rotate","LOS","LOSM","LOSL","parent","los","FromMesh","losM","losL","slicer","CreateBox","width","depth","slicerCSG","subtract","lineOfSight","toMesh","lineOfSightM","lineOfSightL","isPickable","blackMini1","blackMini2","blackMini3","whiteMini1","whiteMini2","whiteMini3","clonedMini","getLosColor","unit","losColorBad","losColorMalus","losColorZero","losColorBonus","getHeight","mesh","getBoundingInfo","boundingBox","extendSize","y","getWidth","getLength","blackBase1","rotation","actionManager","enablePointerMoveEvents","addChild","blackMini1LOS","_children","losMat","whiteBase1","setTarget","whiteMini1LOS","obstacles","container","length","redMat","greyMat","greenMat","container0","container2","container02","container3","container4","container5","container6","container7","container8","container78","container9","container10","container11","container12","moveArea","miniWidth","board","map","moveArea2","switchPlayer","targetFurthestMini","selected","previous","selection","evt","sourceEvent","which","currentMesh","meshUnderPointer","hoverCursor","moveAction","skip","includes","removeMesh","addMesh","cancelSelection","getMeshByName","rotateOnMouseMove","noObstacle","mini1","mini2","origin","targetLeft","targetRight","directionLeft","Normalize","directionRight","Distance","rayLeft","rayRight","hitsLeft","multiPickWithRay","hitsRight","some","hit","pickedMesh","isInCover","originLeft","originRight","target","console","log","isInAngle","forward","forwardDirection","directionTarget","acos","Dot","PI","isHigher","whatIsUnderneath","mini","direction","ray","hits","filter","handleLineOfSight","ev","enemyTarget","intersectsMesh","rangeToTarget","cancelLineOfSight","miniPosition","furthestMiniIndex","indexOf","min","max","furthestMini","furthestTarget","size","setTimeout","diceRoll","rolls","blackMini","arrayResult","i","cloneDice","delay","dicePosition1","dicePosition2","dicePosition3","diceOddPosition3","dicePosition4","dicePosition5","diceOddPosition5","dicePositions","diceIndex","compareRolls","playerRolls","playerMod","enemyRolls","enemyMod","playerSuccess","enemySuccess","j","splice","rangeResult","distance","mini1Team","mini1MaxRange","isTheGameOver","winner","onAttack","coverMod","higherMod","enemyCoverMod","enemyHigherMod","enemyMods","meleeRoll","enemyMeleeRoll","modedRolls","defenseRoll","obstacleTemplateArea","round","highMat","getMaterialByName","forEach","index","child","getDirection","normalize","preventDefault","getGroundPosition","diffX","diffY","atan2","rotateAction","onMouseMove","obstacle","currentObstacle","pickinfo","pick","pointerX","pointerY","pickedPoint","registerAction","OnPointerOverTrigger","OnPointerOutTrigger","OnPickUpTrigger","OnLeftPickTrigger","onDispose","SceneComponent","className","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.430f822d.chunk.js","sourcesContent":["import { Engine, Scene } from '@babylonjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (window) {\r\n            const resize = () => {\r\n                if (scene) {\r\n                    scene.getEngine().resize();\r\n                }\r\n            }\r\n            window.addEventListener('resize', resize);\r\n\r\n            return () => {\r\n                window.removeEventListener('resize', resize);\r\n            }\r\n        }\r\n    }, [scene]);\r\n\r\n    useEffect(() => {\r\n        if (!loaded) {\r\n            setLoaded(true);\r\n            const engine = new Engine(reactCanvas.current, true, { stencil: true });\r\n            const scene = new Scene(engine, sceneOptions);\r\n            setScene(scene);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            if (scene !== null) {\r\n                scene.dispose();\r\n            }\r\n        }\r\n    }, [loaded, sceneOptions, props, onRender, scene])\r\n\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} />\r\n    );\r\n}","export const armies = {\r\n    tabForces: {\r\n        units: { \r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 1, success: 3, mods: { s: -1, m: 1, l: 0, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       },   \r\n    },\r\n    sysTroops: {\r\n        units: {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 2, success: 4, mods: { s: 0, m: 1, l: -1, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       }\r\n    },\r\n    rebels: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 2, success: 4 },\r\n              range: { roll: 3, success: 5, mods: { s: 1, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    },\r\n    outerRing: {\r\n        units : {\r\n          soldier: {\r\n            class: \"FS\",\r\n            move: 4,\r\n            defense: { roll: 1, success: 4 },\r\n            melee: { roll: 2, success: 3 },\r\n            range: { roll: 1, success: 3, mods: { s: 1, m: 0, l: -2, xl: -2 } },\r\n            maxRange: 1212,\r\n            maxInGame: undefined,\r\n            cost: 10\r\n         }\r\n       }    \r\n    },\r\n    voidWarriors: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 4, success: 5 },\r\n              range: { roll: 3, success: 5, mods: { s: 0, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport * as BABYLON from '@babylonjs/core';\r\nimport { CustomMaterial } from '@babylonjs/materials';\r\nimport SceneComponent from './SceneComponent';\r\nimport { armies } from './armies';\r\nimport '../App.css';\r\n\r\nBABYLON.Animation.AllowMatricesInterpolation = true;\r\n\r\nconst onSceneReady = scene => {\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"arcCamera\",\r\n    BABYLON.Tools.ToRadians(0),\r\n    BABYLON.Tools.ToRadians(100),\r\n    780, new BABYLON.Vector3(-60, 400, 0), scene\r\n  );\r\n  //Setting up camera         \r\n  camera.attachControl(canvas, true);\r\n  camera.angularsensibility *= -1;\r\n  camera.checkCollisions = true;\r\n  camera.ellipsoid = new BABYLON.Vector3(1.5, 1, 1.5);\r\n\r\n  //Setting lights and shadows\r\n  var light = new BABYLON.PointLight(\"pointLight\", new BABYLON.Vector3(75, 400, 150), scene);\r\n  light.intensity = 1;\r\n  light.range = 5000;\r\n\r\n  var light2 = new BABYLON.HemisphericLight(\"hemiLight\", new BABYLON.Vector3(0, -4900, 0), scene);\r\n  //Colored backlight => \r\n  //light2.diffuse = new BABYLON.Color3(0.3, 0.2, 0.9);\r\n  light2.intensity = 0.7;\r\n\r\n  var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\r\n  shadowGenerator.usePoissonSampling = true;\r\n\r\n  var hl = new BABYLON.HighlightLayer(\"hl1\", scene);\r\n\r\n  //Materials;\r\n  var invisibleMaterial = new BABYLON.StandardMaterial(\"invisibleMaterial\", scene);\r\n  invisibleMaterial.alpha = 0;\r\n\r\n  var transparentMaterial = new BABYLON.StandardMaterial(\"transparentMaterial\", scene);\r\n  transparentMaterial.alpha = 0.5;\r\n\r\n  var skybox = BABYLON.MeshBuilder.CreateSphere(\"skyBox\", { diameter: 5500, diameterX: 5500 }, scene);\r\n  var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n  skyboxMaterial.backFaceCulling = false;\r\n  skybox.material = skyboxMaterial;\r\n  skybox.receiveShadows = true;\r\n\r\n  var background = BABYLON.MeshBuilder.CreateCylinder(\"background\", { height: 1, diameter: 5000, tessellation: 5000 }, scene);\r\n  var backgroundMaterial = new BABYLON.StandardMaterial(\"background\", scene);\r\n  backgroundMaterial.opacityTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/OpacityTemplate.png`, scene);\r\n  backgroundMaterial.backFaceCulling = false;\r\n  background.material = backgroundMaterial;\r\n  background.translate(BABYLON.Axis.Y, -1, scene);\r\n  background.visibility = 0.4;\r\n  background.receiveShadows = true;\r\n\r\n  var boardMaterial = new BABYLON.StandardMaterial(\"boardMaterial\", scene);\r\n  boardMaterial.diffuseTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Wood/Wood_021_basecolor.jpg`, scene);\r\n  boardMaterial.bumpTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Wood/Wood_021_normal.jpg`, scene);\r\n  boardMaterial.ambientTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Wood/Wood_021_ambientOcclusion.jpg`, scene);\r\n\r\n  var groundMaterial = new BABYLON.StandardMaterial(\"asphaltMaterial\", scene);\r\n  groundMaterial.diffuseTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Asphalt/Asphalt_001_COLOR.jpg`, scene);\r\n  groundMaterial.bumpTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Asphalt/Asphalt_001_NRM.jpg`, scene);\r\n  groundMaterial.specularTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}//Textures/Asphalt/Asphalt_001_SPEC.jpg`, scene);\r\n  groundMaterial.ambientTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Asphalt/Asphalt_001_OCC.jpg`, scene);\r\n\r\n  var miniMaterial = new BABYLON.StandardMaterial(\"plasticMaterial\", scene);\r\n  miniMaterial.diffuseColor = new BABYLON.Color3(220 / 255, 220 / 255, 220 / 255);\r\n\r\n  var tokenMaterialBlack = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialBlack.diffuseTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Token/Coin_low_Coin_material_BaseColor2.png`, scene);\r\n  tokenMaterialBlack.bumpTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Token/Coin_low_Coin_material_Normal.png`, scene);\r\n\r\n  var tokenMaterialWhite = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialWhite.diffuseTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Token/Coin_low_Coin_material_BaseColor.png`, scene);\r\n  tokenMaterialWhite.bumpTexture = new BABYLON.Texture(`.${process.env.PUBLIC_URL}/Textures/Token/Coin_low_Coin_material_Normal.png`, scene);\r\n\r\n  var baseMaterialBlack = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialBlack.diffuseColor = new BABYLON.Color3.Black();\r\n\r\n  var baseMaterialWhite = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatWhite = new BABYLON.StandardMaterial(\"diceMatWhite\", scene);\r\n  diceMatWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatBlack = new BABYLON.StandardMaterial(\"diceMatBlack\", scene);\r\n  diceMatBlack.diffuseColor = new BABYLON.Color3(55 / 255, 71 / 255, 79 / 255);\r\n\r\n  var gameAreaTemplate = 'if( vPositionW.z  < -340.){ discard; } if( vPositionW.z  > 340.){ discard; } if( vPositionW.x  > 450.){ discard; } if( vPositionW.x  < -450.){ discard; }';\r\n\r\n  var moveAreaMat = new CustomMaterial(\"moveAreaMat\", scene);\r\n  moveAreaMat.alpha = 0.25;\r\n  moveAreaMat.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightTransparency = 0.25;\r\n\r\n  var lineOfSightMatW = new CustomMaterial(\"losMatSW\", scene);\r\n  lineOfSightMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatW = new CustomMaterial(\"losMatMW\", scene);\r\n  lineOfSightMMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatW = new CustomMaterial(\"losMatLW\", scene);\r\n  lineOfSightLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatW = new CustomMaterial(\"losMatXLW\", scene);\r\n  lineOfSightXLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMatB = new CustomMaterial(\"losMatSB\", scene);\r\n  lineOfSightMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatB = new CustomMaterial(\"losMatMB\", scene);\r\n  lineOfSightMMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatB = new CustomMaterial(\"losMatLB\", scene);\r\n  lineOfSightLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatB = new CustomMaterial(\"losMatXLB\", scene);\r\n  lineOfSightXLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  //Game initiation\r\n  // Associate Users with teams (teamWhite || teamBlack);\r\n  // example: teamWhite.player = \"@jrej\";\r\n  // example: teamBlack.player = \"@inkito\";\r\n\r\n  var players = {\r\n    teamWhite: {\r\n      player: \"@jrej\",\r\n      army: \"outerRing\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"soldier\", \"soldier\", \"soldier\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    },\r\n    teamBlack: {\r\n      player: \"@inkito\",\r\n      army: \"tabForces\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"soldier\", \"soldier\", \"soldier\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    }\r\n  };\r\n\r\n  // Proceed to initiative roll to decide currentPlayer;\r\n  var currentPlayer = {\r\n    team: \"teamWhite\",\r\n    get player() { return players[this.team].player },\r\n    get army() { return players[this.team].armyStats },\r\n    get startActions() { return players[this.team].startActions },\r\n    get turnActions() { return players[this.team].turnActions },\r\n  };\r\n\r\n  var enemyPlayer = {\r\n    get team() { return currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\" },\r\n    get player() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].player },\r\n    get army() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].armyStats }\r\n  }\r\n\r\n  //Action managers  \r\n  var mapActionManager = new BABYLON.ActionManager(scene);\r\n  var moveActionManager = new BABYLON.ActionManager(scene);\r\n  var teamBlackActionManager = new BABYLON.ActionManager(scene);\r\n  var teamWhiteActionManager = new BABYLON.ActionManager(scene);\r\n\r\n  var actionToken;\r\n\r\n  const importActionTokens = () => {\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      \"\",\r\n      `.${process.env.PUBLIC_URL}/Models/`,\r\n      \"token.babylon\",\r\n      scene,\r\n      function (newMeshes) {\r\n        actionToken = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n        actionToken.position = new BABYLON.Vector3(150, -18, 440);\r\n        actionToken.scaling = new BABYLON.Vector3(800, 900, 800);\r\n        actionToken.name = \"token\"\r\n        actionToken.id = \"token1\"\r\n        actionToken.material = currentPlayer.team === \"teamWhite\" ? tokenMaterialWhite : tokenMaterialBlack;\r\n\r\n        var dx = actionToken.position.x;\r\n        var NB_CLONES = currentPlayer.startActions - 1;\r\n        var actionClone;\r\n        for (var nbclone = 0; nbclone < NB_CLONES; nbclone++) {\r\n          actionClone = actionToken.clone(`token${nbclone + 2}`);\r\n          actionClone.name = \"token\";\r\n          let randomX = Math.floor(Math.random() * 40) + 50;\r\n          actionClone.position.x = dx - randomX;\r\n          actionClone.position.z = actionToken.position.z + Math.floor(Math.random() * 30) - 15;\r\n          dx = dx - randomX;\r\n        };\r\n        players[currentPlayer.team].turnActions = players[currentPlayer.team].startActions;\r\n      }\r\n    );\r\n  }\r\n  importActionTokens();\r\n\r\n  var dice1;\r\n  var dice2;\r\n  var dice3;\r\n  var dice4;\r\n  var dice5;\r\n  var dice6;\r\n  var dice = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice1.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice1.translate(BABYLON.Axis.Y, 30, scene);\r\n      dice1.translate(BABYLON.Axis.X, 175, scene);\r\n      dice1.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice1);\r\n      dice1.id = \"dice1\";\r\n      dice1.name = \"dice\";\r\n      dice1.checkCollisions = true;\r\n      dice1.collisionGroup = 1;\r\n      dice1.collisionMask = 1;\r\n\r\n      dice1.setEnabled(false);\r\n      dice.push(dice1);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice2.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice2 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice2.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice2.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice2.translate(BABYLON.Axis.X, 175, scene);\r\n      dice2.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice2);\r\n      dice2.id = \"dice2\";\r\n      dice2.name = \"dice\";\r\n      dice2.checkCollisions = true;\r\n      dice2.collisionGroup = 1;\r\n      dice2.collisionMask = 1;\r\n\r\n      dice2.setEnabled(false);\r\n      dice.push(dice2);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice3.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice3 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice3.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice3.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice3.translate(BABYLON.Axis.X, 175, scene);\r\n      dice3.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice3);\r\n      dice3.id = \"dice3\";\r\n      dice3.name = \"dice\";\r\n      dice3.checkCollisions = true;\r\n      dice3.collisionGroup = 1;\r\n      dice3.collisionMask = 1;\r\n\r\n      dice3.setEnabled(false);\r\n      dice.push(dice3);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice4.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice4 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice4.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice4.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice4.translate(BABYLON.Axis.X, 175, scene);\r\n      dice4.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice4);\r\n      dice4.id = \"dice4\";\r\n      dice4.name = \"dice\";\r\n      dice4.checkCollisions = true;\r\n      dice4.collisionGroup = 1;\r\n      dice4.collisionMask = 1;\r\n\r\n      dice4.setEnabled(false);\r\n      dice.push(dice4);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice5.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice5 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice5.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice5.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice5.translate(BABYLON.Axis.X, 175, scene);\r\n      dice5.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice5);\r\n      dice5.id = \"dice5\";\r\n      dice5.name = \"dice\";\r\n      dice5.checkCollisions = true;\r\n      dice5.collisionGroup = 1;\r\n      dice5.collisionMask = 1;\r\n\r\n      dice5.setEnabled(false);\r\n      dice.push(dice5);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"dice6.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice6 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice6.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice6.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice6.translate(BABYLON.Axis.X, 175, scene);\r\n      dice6.translate(BABYLON.Axis.Z, 50, scene);\r\n      dice6.rotate(BABYLON.Axis.Y, BABYLON.Tools.ToRadians(90), scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice6);\r\n      dice6.id = \"dice6\";\r\n      dice6.name = \"dice\";\r\n      dice6.checkCollisions = true;\r\n      dice6.collisionGroup = 1;\r\n      dice6.collisionMask = 1;\r\n\r\n      dice6.setEnabled(false);\r\n      dice.push(dice6);\r\n    }\r\n  );\r\n\r\n  var miniWidth = 25.25;\r\n\r\n  var LOS = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSights\", { height: 0.1, diameter: 202 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  LOS.position = new BABYLON.Vector3(0, 100, 0);\r\n  var LOSM = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightm\", { height: 0.1, diameter: 404 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  var LOSL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightl\", { height: 0.1, diameter: 808 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  //var LOSXL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSight\", { height: 0.1, diameter: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2 + miniWidth, tessellation: 256 }, scene);\r\n  /*LOSXL.parent =*/ LOSL.parent = LOSM.parent = LOS;\r\n\r\n  var los = BABYLON.CSG.FromMesh(LOS);\r\n  var losM = BABYLON.CSG.FromMesh(LOSM);\r\n  var losL = BABYLON.CSG.FromMesh(LOSL);\r\n  //var losXL = BABYLON.CSG.FromMesh(LOSXL);\r\n\r\n  var slicer = BABYLON.MeshBuilder.CreateBox(\"LOSTemplate\", { width: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2, height: 2500, depth: 1 }, scene);\r\n  slicer.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n  slicer.position = new BABYLON.Vector3(players[currentPlayer.team].armyStats.units.soldier.maxRange, 100, 0);\r\n  slicer.visibility = 0;\r\n  var slicerCSG = BABYLON.CSG.FromMesh(slicer);\r\n\r\n  //losXL = losXL.subtract(slicerCSG).subtract(losL).subtract(losM).subtract(los);\r\n\r\n  losL = losL.subtract(slicerCSG).subtract(losM).subtract(los);\r\n\r\n  losM = losM.subtract(slicerCSG).subtract(los);\r\n\r\n  los = los.subtract(slicerCSG);\r\n\r\n  var lineOfSight = los.toMesh(\"lineOfSightS\");\r\n  var lineOfSightM = losM.toMesh(\"lineOfSightM\");\r\n  var lineOfSightL = losL.toMesh(\"lineOfSightL\");\r\n  //var lineOfSightXL = losXL.toMesh(\"lineOfSight\");\r\n\r\n  /*lineOfSightXL.parent =*/ lineOfSightL.parent = lineOfSightM.parent = lineOfSight;\r\n  /*lineOfSightXL.isPickable =*/ lineOfSightL.isPickable = lineOfSightM.isPickable = false;\r\n\r\n  lineOfSight.setEnabled(false);\r\n  slicer.dispose();\r\n  LOS.dispose();\r\n  LOSM.dispose();\r\n  LOSL.dispose();\r\n  //LOSXL.dispose();\r\n\r\n\r\n  const getLosColor = (unit, team, range) => {\r\n    var losColorBad = new BABYLON.Color3(164 / 255, 27 / 255, 7 / 255); //red\r\n    var losColorMalus = new BABYLON.Color3(215 / 255, 195 / 255, 58 / 255); //yellow\r\n    var losColorZero = new BABYLON.Color3(7 / 255, 66 / 255, 164 / 255); //blue\r\n    var losColorBonus = new BABYLON.Color3(7 / 255, 164 / 255, 27 / 255); //green\r\n\r\n    if (players[team].armyStats.units[unit].range.mods[range] > 0) {\r\n      return losColorBonus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === 0) {\r\n      return losColorZero;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === -1) {\r\n      return losColorMalus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] <= -2) {\r\n      return losColorBad;\r\n    }\r\n  }\r\n\r\n  var getHeight = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.y * 2 * mesh.scaling.y\r\n  };\r\n\r\n  var getWidth = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.x * 2 * mesh.scaling.x\r\n  };\r\n\r\n  var getLength = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.z * 2 * mesh.scaling.z\r\n  };\r\n\r\n  var blackMini1;\r\n  var blackMini2;\r\n  var blackMini3;\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"STLRW.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      let blackBase1 = BABYLON.MeshBuilder.CreateCylinder(\"whiteBase\", { height: 2.5, diameter: 27, tessellation: 128 }, scene);\r\n      blackBase1.material = baseMaterialBlack;\r\n      blackBase1.translate(BABYLON.Axis.Y, 26.5, scene);\r\n      blackBase1.translate(BABYLON.Axis.X, -300, scene);\r\n\r\n      blackMini1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      blackMini1.translate(BABYLON.Axis.Y, 25, scene);\r\n      blackMini1.translate(BABYLON.Axis.X, -300, scene);\r\n      blackMini1.name = \"blackMini\";\r\n      blackMini1.id = \"blackMini1\";\r\n      blackMini1.unit = \"soldier\";\r\n      blackMini1.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      blackMini1.material = miniMaterial;\r\n      blackMini1.actionManager = teamBlackActionManager;\r\n      blackMini1.enablePointerMoveEvents = true;\r\n\r\n      blackMini1.addChild(blackBase1);\r\n\r\n      blackMini1.width = getWidth(blackMini1);\r\n      blackMini1.height = getHeight(blackMini1);\r\n      blackMini1.checkCollisions = true;\r\n      blackMini1.collisionGroup = 1;\r\n      blackMini1.collisionMask = 1;\r\n\r\n\r\n      var blackMini1LOS = lineOfSight.clone();\r\n      blackMini1LOS.parent = blackMini1;\r\n      blackMini1LOS.position = new BABYLON.Vector3(0, 1, 0);\r\n      blackMini1LOS.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      blackMini1LOS.setEnabled(false);\r\n      blackMini1LOS.material = lineOfSightMatB;\r\n      blackMini1LOS._children[0].material = lineOfSightMMatB;\r\n      blackMini1LOS._children[1].material = lineOfSightLMatB\r\n      //blackMini1LOS._children[2].material = lineOfSightXLMatB\r\n      blackMini1.losMat = [lineOfSightMatB.name, lineOfSightMMatB.name, lineOfSightLMatB.name, lineOfSightXLMatB.name]\r\n\r\n      lineOfSightMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"s\"); //blue\r\n      lineOfSightMMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"m\"); //green\r\n      lineOfSightLMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"l\"); //yellow\r\n      //lineOfSightXLMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"xl\"); //yellow\r\n\r\n      blackMini2 = blackMini1.clone();\r\n      blackMini2.name = \"blackMini\";\r\n      blackMini2.id = \"blackMini2\";\r\n      blackMini2.unit = \"soldier\";\r\n      blackMini2.material = miniMaterial;\r\n      blackMini2.actionManager = teamBlackActionManager;\r\n      blackMini2.translate(BABYLON.Axis.Z, 200, scene);\r\n      var blackMini2LOS = blackMini2._children[1];\r\n      blackMini2LOS.setEnabled(false);\r\n\r\n      blackMini3 = blackMini1.clone();\r\n      blackMini3.name = \"blackMini\";\r\n      blackMini3.id = \"blackMini3\";\r\n      blackMini3.unit = \"soldier\";\r\n      blackMini3.material = miniMaterial;\r\n      blackMini3.actionManager = teamBlackActionManager;\r\n      blackMini3.translate(BABYLON.Axis.Z, -200, scene);\r\n      var blackMini3LOS = blackMini3._children[1];\r\n      blackMini3LOS.setEnabled(false)\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(blackMini1, blackMini2, blackMini3);\r\n      players.teamBlack.minis.push(blackMini1, blackMini2, blackMini3);\r\n    }\r\n  );\r\n\r\n\r\n  var whiteMini1;\r\n  var whiteMini2;\r\n  var whiteMini3;\r\n  var clonedMini;\r\n  //Consider looping through unit array of team\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"SKNCK.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      let whiteBase1 = BABYLON.MeshBuilder.CreateCylinder(\"whiteBase\", { height: 2.5, diameter: 27, tessellation: 128 }, scene);\r\n      whiteBase1.material = baseMaterialWhite;\r\n      whiteBase1.translate(BABYLON.Axis.Y, 26.5, scene);\r\n      whiteBase1.translate(BABYLON.Axis.X, 300, scene);\r\n      whiteBase1.translate(BABYLON.Axis.Z, 1.5, scene);\r\n      whiteMini1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      whiteMini1.translate(BABYLON.Axis.Y, 25, scene);\r\n      whiteMini1.translate(BABYLON.Axis.X, 300, scene);\r\n      whiteMini1.translate(BABYLON.Axis.Z, 0, scene);\r\n      whiteMini1.rotation.y = BABYLON.Tools.ToRadians(90);\r\n      whiteMini1.name = \"whiteMini\";\r\n      whiteMini1.id = \"whiteMini1\";\r\n      whiteMini1.unit = \"soldier\";\r\n      whiteMini1.material = miniMaterial;\r\n      whiteMini1.checkCollisions = true;\r\n      whiteMini1.actionManager = teamWhiteActionManager;\r\n      whiteMini1.collisionGroup = 1;\r\n      whiteMini1.collisionMask = 1;\r\n\r\n      whiteMini1.addChild(whiteBase1);\r\n      camera.setTarget(whiteMini1);\r\n\r\n      whiteMini1.width = getWidth(whiteMini1);\r\n      whiteMini1.height = getHeight(whiteMini1);\r\n\r\n      var whiteMini1LOS = lineOfSight.clone();\r\n      whiteMini1LOS.parent = whiteMini1;\r\n      whiteMini1LOS.position = new BABYLON.Vector3(0, 1, 0);\r\n      whiteMini1LOS.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      whiteMini1LOS.setEnabled(false);\r\n      whiteMini1LOS.material = lineOfSightMatW;\r\n      whiteMini1LOS._children[0].material = lineOfSightMMatW;\r\n      whiteMini1LOS._children[1].material = lineOfSightLMatW;\r\n      //whiteMini1LOS._children[2].material = lineOfSightXLMatW;\r\n      whiteMini1.losMat = [lineOfSightMatW.name, lineOfSightMMatW.name, lineOfSightLMatW.name, lineOfSightXLMatW.name]\r\n\r\n      lineOfSightMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"s\"); //green\r\n      lineOfSightMMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"m\"); //blue\r\n      lineOfSightLMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"l\"); //yellow\r\n      //lineOfSightXLMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"xl\"); //red\r\n\r\n      whiteMini2 = whiteMini1.clone();\r\n      whiteMini2.name = \"whiteMini\";\r\n      whiteMini2.id = \"whiteMini2\";\r\n      whiteMini2.unit = \"soldier\";\r\n      whiteMini2.material = miniMaterial;\r\n      whiteMini2.actionManager = teamWhiteActionManager;\r\n      whiteMini2.translate(BABYLON.Axis.Z, 200, scene);\r\n      var whiteMini2LOS = whiteMini2._children[1];\r\n      whiteMini2LOS.setEnabled(false);\r\n\r\n      whiteMini3 = whiteMini1.clone();\r\n      whiteMini3.name = \"whiteMini\";\r\n      whiteMini3.id = \"whiteMini3\";\r\n      whiteMini3.unit = \"soldier\";\r\n      whiteMini3.material = miniMaterial;\r\n      whiteMini3.actionManager = teamWhiteActionManager;\r\n      whiteMini3.translate(BABYLON.Axis.Z, -200, scene);\r\n      var whiteMini3LOS = whiteMini3._children[1];\r\n      whiteMini3LOS.setEnabled(false);\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(whiteBase1, whiteMini1, whiteMini2, whiteMini3);\r\n      players.teamWhite.minis.push(whiteMini1, whiteMini2, whiteMini3);\r\n    }\r\n  );\r\n\r\n  var obstacles = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/`,\r\n    \"container.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      var container = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n\r\n      //container.material = diceMaterial;\r\n      container.scaling = new BABYLON.Vector3(2, 2, 2);\r\n      container.id = \"obstacle1\";\r\n      container.name = \"obstacle\";\r\n      container.receiveShadows = true;\r\n\r\n      container.width = getWidth(container);\r\n      container.length = getLength(container);\r\n      container.height = getHeight(container);\r\n\r\n      var redMat = new BABYLON.StandardMaterial(scene);\r\n      redMat.diffuseColor = new BABYLON.Color3(0.518, 0.271, 0.267);\r\n\r\n      var greyMat = new BABYLON.StandardMaterial(scene);\r\n      greyMat.diffuseColor = new BABYLON.Color3(0.671, 0.663, 0.733);\r\n\r\n      var greenMat = new BABYLON.StandardMaterial(scene);\r\n      greenMat.diffuseColor = new BABYLON.Color3(0.318, 0.502, 0.43);\r\n\r\n      var container0 = container.clone(\"obstacle\")\r\n      container0.position = new BABYLON.Vector3(22, 0, 2.5);\r\n      var container2 = container.clone(\"obstacle\")\r\n      container2.position = new BABYLON.Vector3(-22, 0, 2.5);\r\n\r\n      var container02 = BABYLON.Mesh.MergeMeshes([container0, container2]);\r\n      container02.material = redMat;\r\n      container02.name = container02.id = \"obstacle\";\r\n      container02.position = new BABYLON.Vector3(180, 50, 125);\r\n      container0.dispose();\r\n      container2.dispose();\r\n\r\n      var container3 = container.clone(\"obstacle\")\r\n      container3.position = new BABYLON.Vector3(100, 50, -125);\r\n      container3.material = redMat;\r\n\r\n      var container4 = container.clone(\"obstacle\")\r\n      container4.position = new BABYLON.Vector3(150, 50, -125);\r\n\r\n      var container5 = container.clone(\"obstacle\")\r\n      container5.position = new BABYLON.Vector3(-100, 50, 125);\r\n\r\n      var container6 = container.clone(\"obstacle\")\r\n      container6.position = new BABYLON.Vector3(-150, 50, 125);\r\n      container6.material = redMat;\r\n\r\n      var container7 = container.clone(\"obstacle\")\r\n      container7.position = new BABYLON.Vector3(22, 0, 2.5);\r\n\r\n      var container8 = container.clone(\"obstacle\")\r\n      container8.position = new BABYLON.Vector3(-22, 0, 2.5);\r\n\r\n      var container78 = BABYLON.Mesh.MergeMeshes([container7, container8]);\r\n      container78.material = greenMat;\r\n      container78.name = container78.id = \"obstacle\";\r\n      container78.position = new BABYLON.Vector3(-180, 50, -125);\r\n      container7.dispose();\r\n      container8.dispose();\r\n\r\n      var container9 = container.clone(\"obstacle\")\r\n      container9.position = new BABYLON.Vector3(-180, 100, -150);\r\n      container9.scaling.z = 1;\r\n\r\n      var container10 = container.clone(\"obstacle\")\r\n      container10.position = new BABYLON.Vector3(180, 100, 100);\r\n      container10.scaling.z = 1;\r\n      container10.material = greyMat;\r\n\r\n      var container11 = container.clone(\"obstacle\")\r\n      container11.position = new BABYLON.Vector3(250, 38, 150);\r\n      container11.scaling.z = 1;\r\n      container11.scaling.y = 1;\r\n      container11.material = greenMat;\r\n\r\n      var container12 = container.clone(\"obstacle\")\r\n      container12.position = new BABYLON.Vector3(-250, 38, -100);\r\n      container12.scaling.z = 1;\r\n      container12.scaling.y = 1;\r\n      container12.material = redMat;\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(container02, container3, container4, container5, container6, container78, container9, container10, container11, container12);\r\n      obstacles.push(container02, container3, container4, container5, container6, container78, container9, container10, container11, container12);\r\n      container.material = invisibleMaterial;\r\n    }\r\n  );\r\n\r\n\r\n  var moveArea = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8, tessellation: 256 }, scene);\r\n  moveArea.material = invisibleMaterial;\r\n  moveArea.actionManager = moveActionManager;\r\n  moveArea.setEnabled(false);\r\n  moveArea.position = new BABYLON.Vector3(0, 26, 0);\r\n\r\n  var moveArea2 = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8 + miniWidth, tessellation: 256 }, scene);\r\n  moveArea2.material = moveAreaMat;\r\n  moveArea2.parent = moveArea;\r\n\r\n  var board;\r\n  var map;\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"\",\r\n    `.${process.env.PUBLIC_URL}/Models/setting.babylon`,\r\n    scene,\r\n    function (newMeshes) {\r\n      board = newMeshes[0];\r\n      board.scaling = new BABYLON.Vector3(1150, 1200, 1000);\r\n      board.material = boardMaterial;\r\n      shadowGenerator.getShadowMap().renderList.push(board);\r\n\r\n      map = BABYLON.MeshBuilder.CreateBox(\"map\", { width: 808, height: 606, depth: 1 }, scene);\r\n      map.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n      map.material = groundMaterial;\r\n      map.receiveShadows = true;\r\n      map.translate(BABYLON.Axis.Y, 25, scene);\r\n      map.actionManager = mapActionManager;\r\n    }\r\n  );\r\n  //board is 24 inch to 32 inch;\r\n\r\n  //Should import action tokens after switching Player\r\n  var switchPlayer = () => {\r\n    if (currentPlayer.team === \"teamWhite\") {\r\n      currentPlayer.team = \"teamBlack\";\r\n      camera.position = new BABYLON.Vector3(-700, 300, 0);\r\n      targetFurthestMini();\r\n    } else if (currentPlayer.team === \"teamBlack\") {\r\n      currentPlayer.team = \"teamWhite\";\r\n      camera.position = new BABYLON.Vector3(700, 300, 0);\r\n      targetFurthestMini();\r\n    }\r\n    importActionTokens();\r\n  };\r\n\r\n  //Mini selected by player1;\r\n  var selected = \"\";\r\n  var rotate = false;\r\n  var previous = {\r\n    position: null,\r\n    rotation: null\r\n  };\r\n\r\n  var selection = function (evt) {\r\n    //left click\r\n    if (evt.sourceEvent.which === 1) {\r\n      let currentMesh = evt.meshUnderPointer;\r\n      scene.hoverCursor = \"pointer\";\r\n      if (selected === currentMesh) {\r\n        moveAction({ skip: true });\r\n        //camera.setTarget(board);\r\n      } else if (currentMesh.id.includes(\"Mini\")) {\r\n        if (selected) {\r\n          hl.removeMesh(selected);\r\n        }\r\n        if (currentPlayer.turnActions > 0) {\r\n          hl.addMesh(currentMesh, BABYLON.Color3.White());\r\n          hl.addMesh(moveArea, BABYLON.Color3.White());\r\n          selected = currentMesh;\r\n          previous.position = selected.position;\r\n          moveArea.position = new BABYLON.Vector3(currentMesh.position.x, 26, currentMesh.position.z)\r\n          moveArea.setEnabled(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelSelection = () => {\r\n    if (selected && rotate) {\r\n      if (previous.position) {\r\n        selected.position = previous.position;\r\n        selected.rotation = previous.rotation;\r\n        moveArea.setEnabled(true);\r\n        moveArea.position = new BABYLON.Vector3(previous.position.x, 26, previous.position.z);\r\n        selected._children[1].setEnabled(false);\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n        }\r\n      }\r\n      canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n      rotate = false;\r\n    } else if (selected && !rotate) {\r\n      moveArea.setEnabled(false);\r\n      hl.removeMesh(selected);\r\n      hl.removeMesh(moveArea);\r\n      scene.removeMesh(clonedMini);\r\n      selected._children[1].setEnabled(false);\r\n      if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n        scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n      }\r\n      targetFurthestMini();\r\n      selected = \"\";\r\n      scene.hoverCursor = \"pointer\";\r\n      if (clonedMini) {\r\n        clonedMini.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noObstacle = (mini1, mini2) => {\r\n    let origin = new BABYLON.Vector3(mini1.position.x, mini1.position.y + getHeight(mini1) * 0.75, mini1.position.z);\r\n\r\n    let targetLeft = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z - mini2.width / 2 + mini2.width * 0.25);\r\n    let targetRight = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z + mini2.width / 2 - mini2.width * 0.25);\r\n\r\n    let directionLeft = targetLeft.subtract(origin);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = targetRight.subtract(origin);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = BABYLON.Vector3.Distance(mini1.position, mini2.position) - getWidth(mini2) / 2;\r\n\r\n    let rayLeft = new BABYLON.Ray(origin, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(origin, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\")) && hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const isInCover = (mini1, mini2) => {\r\n    let originLeft = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z - mini1.width / 2 + mini1.width * 0.25);\r\n    let originRight = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z + mini1.width / 2 - mini1.width * 0.25);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, mini2.position.y + 5, mini2.position.z);\r\n\r\n    let directionLeft = target.subtract(originLeft);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = target.subtract(originRight);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = getWidth(mini1) / 2 + getWidth(mini1);\r\n\r\n    let rayLeft = new BABYLON.Ray(originLeft, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(originRight, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      console.log(mini1.name + \" is in cover!\")\r\n      return true;\r\n    } else if (hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      console.log(mini1.name + \" is in cover!\")\r\n      return true;\r\n    } else {\r\n      console.log(mini1.name + \" is NOT in cover!\")\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const isInAngle = (mini1, mini2) => {\r\n    //Check here if angle forward and target < 90deg\r\n    let forward = forwardDirection(mini1);\r\n\r\n    let origin = new BABYLON.Vector3(mini1.position.x, 55, mini1.position.z);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, 55, mini2.position.z);\r\n\r\n    let directionTarget = target.subtract(origin);\r\n    directionTarget = BABYLON.Vector3.Normalize(directionTarget);\r\n\r\n    if (Math.acos(BABYLON.Vector3.Dot(forward, directionTarget)) * 180 / Math.PI > 90) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    };\r\n  };\r\n\r\n  const isHigher = (mini1, mini2) => {\r\n    if (mini1.position.y > mini2.position.y + getHeight(mini2)) {\r\n      console.log(mini1.name + \" is higher\")\r\n      return true;\r\n    } else {\r\n      console.log(mini1.name + \" is NOT Higher\")\r\n      return false;\r\n    };\r\n  };\r\n\r\n  const whatIsUnderneath = (mini) => {\r\n    let origin = new BABYLON.Vector3(mini.position.x, mini.position.y, mini.position.z);\r\n\r\n    let direction = new BABYLON.Vector3(0, -1, 0);\r\n\r\n    let length = getHeight(mini);\r\n\r\n    let ray = new BABYLON.Ray(origin, direction, length);\r\n\r\n    let hits = scene.multiPickWithRay(ray);\r\n\r\n    if (hits.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return hits.filter(hit => hit.pickedMesh.name.includes(\"obstacle\")).map(hit => hit.pickedMesh)[0]\r\n    } else if (hits.some(hit => hit.pickedMesh.name.includes(\"map\"))) {\r\n      return hits.filter(hit => hit.pickedMesh.name.includes(\"map\")).map(hit => hit.pickedMesh)[0]\r\n    }\r\n  };\r\n\r\n  var handleLineOfSight = (ev) => {\r\n    var enemyTarget = ev.meshUnderPointer;\r\n    if (selected && noObstacle(selected, enemyTarget)) {\r\n      if (enemyTarget.intersectsMesh(selected, false)) {\r\n        //Melee position\r\n        //scene.hoverCursor = \"url('./Cursors/melee.cur') 10 10, auto\";\r\n\r\n      } else if (rangeToTarget(selected, enemyTarget)) {\r\n        selected._children[1].setEnabled(true);\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)){\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n        }\r\n        moveArea.setEnabled(false);\r\n\r\n        //In range position\r\n        //scene.hoverCursor = \"url('./Cursors/aim.cur'), auto\";\r\n      } else if (!enemyTarget.intersectsMesh(selected, false) && !rangeToTarget(selected, enemyTarget)) {\r\n        //scene.hoverCursor = \"url('./Cursors/unavailable.cur') 15 15, auto\";\r\n        moveArea.setEnabled(false);\r\n        selected._children[1].setEnabled(true);\r\n        scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelLineOfSight = () => {\r\n    if (selected) {\r\n      selected._children[1].setEnabled(false);\r\n      if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n        scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n      }\r\n      if (!rotate) {\r\n        moveArea.setEnabled(true);\r\n      }\r\n    }\r\n    scene.hoverCursor = \"pointer\";\r\n  }\r\n\r\n  var targetFurthestMini = () => {\r\n    if (players[currentPlayer.team].minis) {\r\n      var miniPosition = players[currentPlayer.team].minis.map(mini => mini.position.x);\r\n      var furthestMiniIndex = currentPlayer.team === \"teamWhite\" ? miniPosition.indexOf(Math.min(...miniPosition)) : miniPosition.indexOf(Math.max(...miniPosition));\r\n      var furthestMini = players[currentPlayer.team].minis[furthestMiniIndex];\r\n      var furthestTarget = BABYLON.Mesh.CreateSphere(\"targetSphere\", { size: 10 }, scene);\r\n      furthestTarget.visibility = 0;\r\n      furthestTarget.position = new BABYLON.Vector3(furthestMini.position.x, furthestMini.position.y, 0);\r\n      camera.setTarget(furthestTarget);\r\n      setTimeout(() => {\r\n        furthestTarget.dispose();\r\n      }, 1100)\r\n    }\r\n  };\r\n\r\n  var diceRoll = (rolls, blackMini, defense, selected) => {\r\n    let arrayResult = [];\r\n    for (let i = 0; i < rolls; i++) {\r\n      arrayResult.push(Math.floor(Math.random() * 6) + 1)\r\n    }\r\n\r\n    return arrayResult;\r\n  }\r\n\r\n  var cloneDice = (rolls, mini, delay) => {\r\n    var dicePosition1 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 30)\r\n    var dicePosition2 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition4 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition6 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 45)\r\n\r\n    var dicePositions = [dicePosition1, dicePosition2, dicePosition3, dicePosition4, dicePosition5, dicePosition6];\r\n\r\n    for (let i = 0; i < rolls.length; i++) {\r\n      var diceIndex = i + 1\r\n      if (mini.name.includes(\"white\")) {\r\n        dice[rolls[i] - 1].material = diceMatWhite;\r\n      } else {\r\n        dice[rolls[i] - 1].material = diceMatBlack;\r\n      }\r\n\r\n      if (rolls.length === 3 && diceIndex === 3) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition3;\r\n      } else if (rolls.length === 5 && diceIndex === 5) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition5;\r\n      } else {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = dicePositions[i];\r\n      }\r\n\r\n\r\n      setTimeout(function () {\r\n        scene.removeMesh(scene.getMeshByName(`diceClone${i}`));\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  var compareRolls = (playerRolls, playerMod, enemyRolls, enemyMod) => {\r\n    //check if rolls successful, remove any unsuccessful rolls\r\n    var playerSuccess = playerRolls.filter(roll => roll + playerMod >= currentPlayer.army.units.soldier.range.success);\r\n    var enemySuccess = enemyRolls.filter(roll => roll + enemyMod >= enemyPlayer.army.units.soldier.range.success);\r\n\r\n    console.log(\"Player rolls:\");\r\n    console.log(playerRolls);\r\n    console.log(\"He has a \" + playerMod + \" modifier to dice roll\");\r\n\r\n\r\n    console.log(\"Enemy rolls:\");\r\n    console.log(enemyRolls);\r\n    console.log(\"He has a \" + enemyMod + \" modifier to dice roll\");\r\n\r\n    console.log(\"Player success rolls:\")\r\n    console.log(playerSuccess);\r\n\r\n    console.log(\"Enemy Success rolls:\")\r\n    console.log(enemySuccess);\r\n    //check if duplicates, remove duplicates player enemy\r\n    //var uniquePlayerRolls = [...playerSuccess];\r\n    //var uniqueEnemyRolls = [...enemySuccess];\r\n\r\n    for (let i = 0; i < playerSuccess.length; i++) {\r\n      for (let j = 0; j < enemySuccess.length; j++) {\r\n        if (playerSuccess[i] === enemySuccess[j]) {\r\n          playerSuccess.splice(i, 1);\r\n          enemySuccess.splice(j, 1)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Math.max(...playerSuccess) > Math.max(...enemySuccess)) {\r\n      //player with the highest numbers win.   \r\n      console.log(\"Player wins with a higher roll!\");\r\n      return \"player\";\r\n    } else if (Math.max(...enemySuccess) > Math.max(...playerSuccess)) {\r\n      console.log(\"Enemy wins with a higher roll!\");\r\n      return \"enemy\";\r\n    } else {\r\n      //if no result left or equal, both miss.\r\n      return null\r\n    }\r\n  }\r\n\r\n  var rangeToTarget = (mini1, mini2) => {\r\n    let rangeResult;\r\n\r\n    let distance = BABYLON.Vector3.Distance(mini1.position, mini2.position) - mini2.width / 2;\r\n    let mini1Team = mini1.name === \"whiteMini\" ? \"teamWhite\" : \"teamBlack\";\r\n    let mini1MaxRange = players[mini1Team].armyStats.units[mini1.unit].maxRange\r\n    //close combat if minis base are within 1 inch\r\n    if (distance <= mini1.width / 2 + mini2.width / 2) {\r\n      rangeResult = \"c\";\r\n      //8 inches\r\n    } else if (distance <= 202) {\r\n      rangeResult = \"s\";\r\n      // between 8 and 16 inches\r\n    } else if (distance > 202 && distance <= 404) {\r\n      rangeResult = \"m\";\r\n      // between 16 and 32 inches\r\n    } else if (distance > 404 && distance <= 808) {\r\n      rangeResult = \"l\";\r\n      // between 32 and max range\r\n    } else if (distance > 808 && distance <= mini1MaxRange) {\r\n      rangeResult = \"xl\";\r\n    } else if (distance > mini1MaxRange) {\r\n      rangeResult = null\r\n    }\r\n\r\n    //check if obstacles between minis;\r\n    //check if angle between mini1 front and mini2 is < 90deg\r\n    if (noObstacle(mini1, mini2) && isInAngle(mini1, mini2)) {\r\n      return rangeResult;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  var isTheGameOver = () => {\r\n    let winner = \"\";\r\n    if (players.teamBlack.startActions === 0 && players.teamWhite.startActions === 0) {\r\n      console.log(\"tie\")\r\n      winner = null;\r\n      console.log(\"Game Over. No Winners this time.\")\r\n    } else if (players.teamBlack.startActions === 0) {\r\n      winner = \"Team White\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else if (players.teamWhite.startActions === 0) {\r\n      winner = \"Team Black\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else {\r\n      winner = undefined;\r\n    }\r\n\r\n    return winner;\r\n  }\r\n\r\n  // Consider the option of choosing multiple targets\r\n  var onAttack = (ev) => {\r\n    let enemyTarget = ev.meshUnderPointer;\r\n    let winner = \"\";\r\n    if (selected) {\r\n      var currentMesh = selected;\r\n      var range = rangeToTarget(selected, enemyTarget);\r\n\r\n      let coverMod = isInCover(selected, enemyTarget) ? 1 : 0;\r\n      let higherMod = isHigher(selected, enemyTarget) ? 1 : 0;\r\n      var mods = coverMod + higherMod + currentPlayer.army.units[selected.unit].range.mods[range];\r\n\r\n      let enemyCoverMod = isInCover(enemyTarget, selected) ? 1 : 0;\r\n      let enemyHigherMod = isHigher(enemyTarget, selected) ? 1 : 0;\r\n      let enemyMods = enemyCoverMod + enemyHigherMod + enemyPlayer.army.units[enemyTarget.unit].range.mods[range];\r\n\r\n      if (range && isInAngle(selected, enemyTarget)) {\r\n        if (enemyTarget.intersectsMesh(selected, false) || range === \"c\") {\r\n          //Melee attack\r\n          console.log('Stabbing ' + enemyTarget.id + \" with \" + selected.id)\r\n          console.log(\"Player target roll: \" + currentPlayer.army.units[selected.unit].melee.success + \"+\")\r\n          let meleeRoll = diceRoll(currentPlayer.army.units[selected.unit].melee.roll);\r\n\r\n          //Generate Dice\r\n          cloneDice(meleeRoll, selected, 1000);\r\n\r\n          console.log(\"Enemy target roll: \" + enemyPlayer.army.units[selected.unit].melee.success + \"+\")\r\n          let enemyMeleeRoll = diceRoll(1);\r\n          //Generate Dice\r\n          cloneDice(enemyMeleeRoll, enemyTarget, 1000);\r\n\r\n          winner = compareRolls(meleeRoll, 0, enemyMeleeRoll, 0);\r\n        } else {\r\n          //Range attack\r\n          var rolls = [];\r\n          var modedRolls = [];\r\n          var enemyRolls = [];\r\n          //var modedEnemyRolls = [];\r\n\r\n\r\n          console.log(`Shooting ${enemyTarget.id} with ${selected.id} at range ${range}.`)\r\n          // Check for enemy roll (Should be enemy line of sight when rotation is implemented!)\r\n          console.log(\"Player target roll: \" + currentPlayer.army.units[selected.unit].range.success + \"+\")\r\n\r\n          rolls = diceRoll(currentPlayer.army.units[selected.unit].range.roll);\r\n          //Generate Dice\r\n          cloneDice(rolls, selected, 1000);\r\n\r\n          modedRolls = rolls.map(roll => roll + mods);\r\n\r\n          //Enemy Target Response\r\n          if (rangeToTarget(enemyTarget, selected)) {\r\n            console.log(\"Enemy target roll: \" + enemyPlayer.army.units[enemyTarget.unit].range.success + \"+\")\r\n\r\n            enemyRolls = diceRoll(1);\r\n            //Generate Dice\r\n            cloneDice(enemyRolls, enemyTarget, 1000);\r\n\r\n            winner = compareRolls(rolls, mods, enemyRolls, enemyMods);\r\n          }\r\n\r\n          //No response from enemy (range difference)\r\n          if (!winner) {\r\n            if (modedRolls.some(roll => roll >= currentPlayer.army.units[selected.unit].range.success)) {\r\n              console.log(\"Success! You shot him!\");\r\n              winner = \"player\"\r\n            }\r\n          }\r\n        }\r\n\r\n        //Defense Roll\r\n        if (winner === \"player\") {\r\n          console.log(\"Enemy is hit. Defense roll target: \" + enemyPlayer.army.units[enemyTarget.unit].defense.success + \"+\");\r\n          if (enemyCoverMod > 0) {\r\n            console.log(\"Enemy has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(enemyPlayer.army.units[enemyTarget.unit].defense.roll)\r\n          console.log(\"Enemy rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, enemyTarget, 1250);\r\n          }, 1250);\r\n          //Cover modifiers to add here\r\n          if (defenseRoll.some(roll => roll + enemyCoverMod >= enemyPlayer.army.units[enemyTarget.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. Enemy saved!\");\r\n          } else {\r\n            console.log(\"Enemy killed!\");\r\n            setTimeout(function () {\r\n              enemyTarget.position = new BABYLON.Vector3(Math.floor(Math.random() * 190) - 200, 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              enemyTarget.name = \"decor\";\r\n              enemyTarget.isPickable = false\r\n              players[enemyPlayer.team].minis = players[enemyPlayer.team].minis.filter(mini => mini.id !== enemyTarget.id)\r\n              players[enemyPlayer.team].startActions -= 2\r\n              isTheGameOver();\r\n              cancelSelection();\r\n            }, 2500);\r\n          }\r\n        } else if (winner === \"enemy\") {\r\n          console.log(\"Player is hit. Defense roll target: \" + currentPlayer.army.units[selected.unit].defense.success + \"+\")\r\n          if (coverMod > 0) {\r\n            console.log(\"Player has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(currentPlayer.army.units[selected.unit].defense.roll, undefined, true, selected);\r\n          console.log(\"Player rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, currentMesh, 1250);\r\n          }, 1250);\r\n          if (defenseRoll.some(roll => roll + coverMod >= currentPlayer.army.units[selected.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. Player mini saved!\");\r\n          } else {\r\n            console.log(\"Player killed!\");\r\n            setTimeout(function () {\r\n              camera.target = map;\r\n              currentMesh.position = new BABYLON.Vector3(200 - Math.floor(Math.random() * 190), 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              currentMesh.name = \"decor\";\r\n              currentMesh.isPickable = false\r\n              players[currentPlayer.team].minis = players[currentPlayer.team].minis.filter(mini => mini.id !== currentMesh.id)\r\n              players[currentPlayer.team].startActions -= 2\r\n              isTheGameOver();\r\n              cancelSelection();\r\n            }, 2500);\r\n          }\r\n        } else {\r\n          console.log(\"No winners! Try again.\")\r\n        }\r\n\r\n        players[currentPlayer.team].turnActions -= 1;\r\n        scene.removeMesh(scene.getMeshByName(\"token\"));\r\n        cancelSelection();\r\n\r\n        if (players[currentPlayer.team].turnActions === 0) {\r\n          setTimeout(function () {\r\n            switchPlayer();\r\n          }, 3000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var moveAction = ({ skip }) => {\r\n    if (selected) {\r\n      if (!skip) {\r\n        previous.position = selected.position;\r\n        selected.position = clonedMini.position;\r\n      }\r\n      moveArea.position = new BABYLON.Vector3(selected.position.x, 26, selected.position.z);\r\n      moveArea.setEnabled(false);\r\n      selected._children[1].setEnabled(true);\r\n\r\n      //Fragment diffuse on main LOS and creating ground LOS clone\r\n      if (whatIsUnderneath(selected) && whatIsUnderneath(selected).name.includes(\"obstacle\")) {\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).position.y = - selected.position.y + 26;\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n        } else {\r\n          selected._children[1].clone(`groundLOS${selected.id}`).position.y = - selected.position.y + 26;\r\n        }\r\n\r\n        if (scene.getMeshByName(\"groundMoveArea\")) {\r\n          scene.getMeshByName(\"groundMoveArea\").position.y = selected.position.y - getHeight(selected) / 2 - 5;\r\n        } else {\r\n          moveArea.clone(\"groundMoveArea\");\r\n          scene.getMeshByName(\"groundMoveArea\").parent = moveArea;\r\n          scene.getMeshByName(\"groundMoveArea\").position = new BABYLON.Vector3(0, selected.position.y - getHeight(selected) / 2 - 5, 0);\r\n        }\r\n\r\n        let obstacleTemplateArea = `if( vPositionW.z  < ${Math.round(whatIsUnderneath(selected).position.z - getLength(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.z  > ${Math.round(whatIsUnderneath(selected).position.z + getLength(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.x  > ${Math.round(whatIsUnderneath(selected).position.x + getWidth(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.x  < ${Math.round(whatIsUnderneath(selected).position.x - getWidth(whatIsUnderneath(selected)) / 2)}.){ discard; }`;\r\n        let highMat = new CustomMaterial(\"highMat\", scene);\r\n        highMat.alpha = 0.25;\r\n        highMat.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n        highMat.diffuseColor = scene.getMaterialByName(selected.losMat[0]).diffuseColor;\r\n\r\n        selected._children[1].material = highMat;\r\n        selected._children[1]._children.forEach((los, index) => {\r\n          los.material = new CustomMaterial(`highMat${index}`, scene);\r\n          los.material.alpha = 0.25;\r\n          los.material.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n          los.material.diffuseColor = scene.getMaterialByName(selected.losMat[index + 1]).diffuseColor;\r\n        });\r\n        scene.getMeshByName(\"groundMoveArea\").material = new CustomMaterial(`highMoveMat`, scene);\r\n        scene.getMeshByName(\"groundMoveArea\").material.alpha = 0.25;\r\n        scene.getMeshByName(\"groundMoveArea\").material.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n        scene.getMeshByName(\"groundMoveArea\")._children.forEach(child => child.setEnabled(false));\r\n      } else {\r\n        selected._children[1].material = scene.getMaterialByName(selected.losMat[0]);\r\n        selected._children[1]._children.forEach((los, index) => los.material = scene.getMaterialByName(selected.losMat[index + 1]));\r\n        moveArea2.material = moveAreaMat;\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).dispose();\r\n        }\r\n        if (scene.getMeshByName(\"groundMoveArea\")) {\r\n          scene.getMeshByName(\"groundMoveArea\").dispose();\r\n        }\r\n      };\r\n\r\n      previous.rotation = selected.rotation.clone();\r\n      rotate = true;\r\n    }\r\n  }\r\n\r\n  var forwardDirection = (mini) => {\r\n    let forward = new BABYLON.Vector3(0, 0, -1);\r\n    let direction = mini.getDirection(forward);\r\n    direction.normalize();\r\n    return direction;\r\n  }\r\n\r\n  var rotateOnMouseMove = (evt) => {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      var diffX = selected.position.x - getGroundPosition(evt).x;\r\n      var diffY = selected.position.z - getGroundPosition(evt).z;\r\n      selected.rotation.y = Math.atan2(diffX, diffY);\r\n    }\r\n  }\r\n\r\n  var rotateAction = (evt) => {\r\n    if (evt.which === 1 || evt.sourceEvent.which === 1) {\r\n      if (selected && rotate) {\r\n        players[currentPlayer.team].turnActions -= 1;\r\n        scene.removeMesh(scene.getMeshByName(\"token\"));\r\n        rotate = false;\r\n        previous.position = null;\r\n        previous.rotation = null;\r\n        cancelSelection();\r\n\r\n        if (players[currentPlayer.team].turnActions === 0) {\r\n          setTimeout(function () {\r\n            switchPlayer();\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var onMouseMove = function (evt) {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      let otherMinis = [...players[enemyPlayer.team].minis, ...players[currentPlayer.team].minis.filter(mini => mini.id !== selected.id)];\r\n      //Miniature collision\r\n      if (!otherMinis.some(mini =>\r\n        getGroundPosition(evt).x < mini.position.x + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).x > mini.position.x - getWidth(mini) + 2 &&\r\n        getGroundPosition(evt).z < mini.position.z + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).z > mini.position.z - getWidth(mini) + 2\r\n      )) {\r\n        //Obstacle collision\r\n        if (\r\n          !obstacles.filter(obstacle => getHeight(obstacle) + obstacle.position.y - (getHeight(obstacle) / 2) > getHeight(selected) + selected.position.y).some(obstacle =>\r\n            getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n          )\r\n        ) {\r\n          //game area limits\r\n          if (getGroundPosition(evt).x > -388 && getGroundPosition(evt).x < 388 && getGroundPosition(evt).z > -285 && getGroundPosition(evt).z < 285) {\r\n            //Filtering out obstacles shorter than mini size. Allows vertical move.\r\n            var currentObstacle = obstacles.filter(obstacle => getHeight(obstacle) < getHeight(selected) + selected.position.y - 25).filter(obstacle =>\r\n              getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n            );\r\n            if (currentObstacle && currentObstacle.length > 0) {\r\n              //Vertical move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, getHeight(currentObstacle[0]) + 25, getGroundPosition(evt).z);\r\n            } else {\r\n              //Regular move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, 25, getGroundPosition(evt).z);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var getGroundPosition = function () {\r\n    // Use a predicate to get position on the ground\r\n    var pickinfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) { return mesh === map; });\r\n    if (pickinfo.hit) {\r\n      return pickinfo.pickedPoint;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      clonedMini = selected.clone();\r\n      clonedMini.position = selected.position;\r\n      clonedMini.isPickable = false;\r\n      clonedMini._children.forEach(child => child.setEnabled(false));\r\n\r\n      clonedMini.material = transparentMaterial;\r\n      canvas.addEventListener(\"mousemove\", onMouseMove, false);\r\n      canvas.addEventListener(\"click\", moveAction, false);\r\n    })\r\n  );\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      clonedMini.dispose();\r\n      canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n      canvas.removeEventListener(\"click\", moveAction);\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (selected && rotate) {\r\n        selected._children[1].setEnabled(true);\r\n      }\r\n      if (rotate) {\r\n        canvas.addEventListener(\"mousemove\", rotateOnMouseMove, false);\r\n        canvas.addEventListener(\"click\", rotateAction, false);\r\n      }\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (selected && !rotate) {\r\n        selected._children[1].setEnabled(false);\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n        }\r\n      }\r\n      canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n      canvas.removeEventListener(\"click\", rotateAction);\r\n    })\r\n  );\r\n\r\n  //Select current player mini\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\" && !rotate) {\r\n        onAttack(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  //LOS on opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        cancelLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n\r\n  //Select current player mini\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\" && !rotate) {\r\n        onAttack(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n\r\n  //LOS on opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        cancelLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  canvas.addEventListener('contextmenu', cancelSelection, false);\r\n  scene.onDispose = function () {\r\n    canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n    canvas.removeEventListener(\"contextmenu\", cancelSelection);\r\n  }\r\n}\r\n\r\nexport default () => (\r\n  <div >\r\n    <SceneComponent className=\"w-full h-full\" antialias onSceneReady={onSceneReady} id='my-canvas' />\r\n  </div>\r\n)","import React from 'react';\nimport './App.css';\nimport Scene from './components/Scene';\n\nconst App = () => (\n  <div className=\"w-full h-full\">\n    <Scene />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}