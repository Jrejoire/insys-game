{"version":3,"sources":["components/SceneComponent.jsx","components/armies.js","components/Scene.js","App.js","serviceWorker.js","index.js"],"names":["props","reactCanvas","useRef","sceneOptions","antialias","engineOptions","adaptToDeviceRatio","onRender","rest","onSceneReady","useState","loaded","setLoaded","scene","setScene","useEffect","window","resize","getEngine","addEventListener","removeEventListener","engine","Engine","current","stencil","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","dispose","ref","armies","tabForces","units","soldier","class","move","defense","roll","success","melee","range","mods","s","m","l","xl","maxRange","maxInGame","undefined","cost","sysTroops","rebels","outerRing","voidWarriors","BABYLON","AllowMatricesInterpolation","canvas","getRenderingCanvas","camera","ToRadians","attachControl","angularsensibility","checkCollisions","ellipsoid","light","intensity","shadowGenerator","usePoissonSampling","hl","invisibleMaterial","alpha","transparentMaterial","skybox","CreateSphere","diameter","diameterX","skyboxMaterial","backFaceCulling","material","receiveShadows","background","CreateCylinder","height","tessellation","backgroundMaterial","opacityTexture","translate","Y","visibility","boardMaterial","diffuseTexture","bumpTexture","ambientTexture","groundMaterial","specularTexture","miniMaterial","diffuseColor","tokenMaterialBlack","tokenMaterialWhite","baseMaterialBlack","Black","baseMaterialWhite","White","diceMatWhite","diceMatBlack","gameAreaTemplate","moveAreaMat","CustomMaterial","Fragment_Custom_Diffuse","lineOfSightMatW","lineOfSightMMatW","lineOfSightLMatW","lineOfSightXLMatW","lineOfSightMatB","lineOfSightMMatB","lineOfSightLMatB","lineOfSightXLMatB","actionToken","dice1","dice2","dice3","dice4","dice5","dice6","players","teamWhite","player","army","this","minis","startActions","turnActions","reduce","acc","value","armyStats","teamBlack","currentPlayer","team","enemyPlayer","mapActionManager","moveActionManager","teamBlackActionManager","teamWhiteActionManager","importActionTokens","ImportMesh","newMeshes","MergeMeshes","position","scaling","name","id","actionClone","dx","x","NB_CLONES","nbclone","clone","randomX","Math","floor","random","z","dice","X","Z","getShadowMap","renderList","push","collisionGroup","collisionMask","setEnabled","rotate","LOS","LOSM","LOSL","parent","los","FromMesh","losM","losL","slicer","CreateBox","width","depth","slicerCSG","subtract","lineOfSight","toMesh","lineOfSightM","lineOfSightL","isPickable","blackMini1","blackMini2","blackMini3","blackMini1LOS","blackMini3LOS","whiteMini1","whiteMini2","whiteMini3","clonedMini","whiteMini1LOS","getLosColor","unit","losColorBad","losColorMalus","losColorZero","losColorBonus","getHeight","mesh","getBoundingInfo","boundingBox","extendSize","y","getWidth","getLength","blackBase1","rotation","actionManager","enablePointerMoveEvents","addChild","_children","whiteBase1","setTarget","obstacles","container","length","redMat","greyMat","greenMat","container2","container3","container4","container5","container6","container7","container8","container9","container10","container11","container12","moveArea","miniWidth","board","map","moveArea2","switchPlayer","targetFurthestMini","selected","previous","selection","evt","sourceEvent","which","currentMesh","meshUnderPointer","hoverCursor","moveAction","skip","includes","removeMesh","addMesh","cancelSelection","rotateOnMouseMove","noObstacle","mini1","mini2","origin","targetLeft","targetRight","directionLeft","Normalize","directionRight","Distance","rayLeft","rayRight","hitsLeft","multiPickWithRay","hitsRight","some","hit","pickedMesh","isInCover","originLeft","originRight","target","console","log","isInAngle","forward","forwardDirection","directionTarget","acos","Dot","PI","handleLineOfSight","ev","enemyTarget","intersectsMesh","rangeToTarget","cancelLineOfSight","miniPosition","mini","furthestMiniIndex","indexOf","min","max","furthestMini","furthestTarget","size","setTimeout","diceRoll","rolls","blackMini","arrayResult","i","cloneDice","delay","dicePosition1","dicePosition2","dicePosition3","diceOddPosition3","dicePosition4","dicePosition5","diceOddPosition5","dicePositions","diceIndex","getMeshByName","compareRolls","playerRolls","playerMod","enemyRolls","enemyMod","playerSuccess","filter","enemySuccess","j","splice","rangeResult","distance","mini1Team","mini1MaxRange","isTheGameOver","winner","onAttack","coverMod","enemyCoverMod","enemyMods","meleeRoll","enemyMeleeRoll","modedRolls","defenseRoll","direction","getDirection","normalize","preventDefault","getGroundPosition","diffX","diffY","atan2","rotateAction","onMouseMove","obstacle","currentObstacle","pickinfo","pick","pointerX","pointerY","pickedPoint","registerAction","OnPointerOverTrigger","OnPointerOutTrigger","OnPickUpTrigger","OnLeftPickTrigger","onDispose","SceneComponent","className","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4c6b2f4.chunk.js","sourcesContent":["import { Engine, Scene } from '@babylonjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (window) {\r\n            const resize = () => {\r\n                if (scene) {\r\n                    scene.getEngine().resize();\r\n                }\r\n            }\r\n            window.addEventListener('resize', resize);\r\n\r\n            return () => {\r\n                window.removeEventListener('resize', resize);\r\n            }\r\n        }\r\n    }, [scene]);\r\n\r\n    useEffect(() => {\r\n        if (!loaded) {\r\n            setLoaded(true);\r\n            const engine = new Engine(reactCanvas.current, true, { stencil: true });\r\n            const scene = new Scene(engine, sceneOptions);\r\n            setScene(scene);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            if (scene !== null) {\r\n                scene.dispose();\r\n            }\r\n        }\r\n    }, [loaded, sceneOptions, props, onRender, scene])\r\n\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} />\r\n    );\r\n}","export const armies = {\r\n    tabForces: {\r\n        units: { \r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 1, success: 3, mods: { s: -1, m: 1, l: 0, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       },   \r\n    },\r\n    sysTroops: {\r\n        units: {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 2, success: 4, mods: { s: 0, m: 1, l: -1, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       }\r\n    },\r\n    rebels: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 2, success: 4 },\r\n              range: { roll: 3, success: 5, mods: { s: 1, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    },\r\n    outerRing: {\r\n        units : {\r\n          soldier: {\r\n            class: \"FS\",\r\n            move: 4,\r\n            defense: { roll: 1, success: 4 },\r\n            melee: { roll: 2, success: 3 },\r\n            range: { roll: 1, success: 3, mods: { s: 1, m: 0, l: -2, xl: -2 } },\r\n            maxRange: 1212,\r\n            maxInGame: undefined,\r\n            cost: 10\r\n         }\r\n       }    \r\n    },\r\n    voidWarriors: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 4, success: 5 },\r\n              range: { roll: 3, success: 5, mods: { s: 0, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport * as BABYLON from '@babylonjs/core';\r\nimport { CustomMaterial } from '@babylonjs/materials';\r\nimport SceneComponent from './SceneComponent';\r\nimport { armies } from './armies';\r\nimport '../App.css';\r\n\r\nBABYLON.Animation.AllowMatricesInterpolation = true;\r\n\r\nconst onSceneReady = scene => {\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"arcCamera\",\r\n    BABYLON.Tools.ToRadians(0),\r\n    BABYLON.Tools.ToRadians(100),\r\n    780, new BABYLON.Vector3(-60, 400, 0), scene\r\n  );\r\n  //Setting up camera         \r\n  camera.attachControl(canvas, true);\r\n  camera.angularsensibility *= -1;\r\n  camera.checkCollisions = true;\r\n  camera.ellipsoid = new BABYLON.Vector3(1.5, 1, 1.5);\r\n\r\n  //Setting lights and shadows\r\n  var light = new BABYLON.PointLight(\"pointLight\", new BABYLON.Vector3(75, 400, 150), scene);\r\n  light.intensity = 1;\r\n  light.range = 5000;\r\n\r\n  var light2 = new BABYLON.HemisphericLight(\"hemiLight\", new BABYLON.Vector3(0, -4900, 0), scene);\r\n  //Colored backlight => \r\n  //light2.diffuse = new BABYLON.Color3(0.3, 0.2, 0.9);\r\n  light2.intensity = 0.7;\r\n\r\n  var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\r\n  shadowGenerator.usePoissonSampling = true;\r\n\r\n  var hl = new BABYLON.HighlightLayer(\"hl1\", scene);\r\n\r\n  //Materials;\r\n  var invisibleMaterial = new BABYLON.StandardMaterial(\"invisibleMaterial\", scene);\r\n  invisibleMaterial.alpha = 0;\r\n\r\n  var transparentMaterial = new BABYLON.StandardMaterial(\"transparentMaterial\", scene);\r\n  transparentMaterial.alpha = 0.5;\r\n\r\n  var skybox = BABYLON.MeshBuilder.CreateSphere(\"skyBox\", { diameter: 5500, diameterX: 5500 }, scene);\r\n  var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n  skyboxMaterial.backFaceCulling = false;\r\n  skybox.material = skyboxMaterial;\r\n  skybox.receiveShadows = true;\r\n\r\n  var background = BABYLON.MeshBuilder.CreateCylinder(\"background\", { height: 1, diameter: 5000, tessellation: 5000 }, scene);\r\n  var backgroundMaterial = new BABYLON.StandardMaterial(\"background\", scene);\r\n  backgroundMaterial.opacityTexture = new BABYLON.Texture(\"./Textures/OpacityTemplate.png\", scene);\r\n  backgroundMaterial.backFaceCulling = false;\r\n  background.material = backgroundMaterial;\r\n  background.translate(BABYLON.Axis.Y, -1, scene);\r\n  background.visibility = 0.4;\r\n  background.receiveShadows = true;\r\n\r\n  var boardMaterial = new BABYLON.StandardMaterial(\"boardMaterial\", scene);\r\n  boardMaterial.diffuseTexture = new BABYLON.Texture(\"./Textures/Wood/Wood_021_basecolor.jpg\", scene);\r\n  boardMaterial.bumpTexture = new BABYLON.Texture(\"./Textures/Wood/Wood_021_normal.jpg\", scene);\r\n  boardMaterial.ambientTexture = new BABYLON.Texture(\"./Textures/Wood/Wood_021_ambientOcclusion.jpg\", scene);\r\n\r\n  var groundMaterial = new BABYLON.StandardMaterial(\"asphaltMaterial\", scene);\r\n  groundMaterial.diffuseTexture = new BABYLON.Texture(\"./Textures/Asphalt/Asphalt_001_COLOR.jpg\", scene);\r\n  groundMaterial.bumpTexture = new BABYLON.Texture(\"./Textures/Asphalt/Asphalt_001_NRM.jpg\", scene);\r\n  groundMaterial.specularTexture = new BABYLON.Texture(\"./Textures/Asphalt/Asphalt_001_SPEC.jpg\", scene);\r\n  groundMaterial.ambientTexture = new BABYLON.Texture(\"./Textures/Asphalt/Asphalt_001_OCC.jpg\", scene);\r\n\r\n  var miniMaterial = new BABYLON.StandardMaterial(\"plasticMaterial\", scene);\r\n  miniMaterial.diffuseColor = new BABYLON.Color3(220 / 255, 220 / 255, 220 / 255);\r\n\r\n  var tokenMaterialBlack = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialBlack.diffuseTexture = new BABYLON.Texture(\"./Textures/Token/Coin_low_Coin_material_BaseColor2.png\", scene);\r\n  tokenMaterialBlack.bumpTexture = new BABYLON.Texture(\"./Textures/Token/Coin_low_Coin_material_Normal.png\", scene);\r\n\r\n  var tokenMaterialWhite = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialWhite.diffuseTexture = new BABYLON.Texture(\"./Textures/Token/Coin_low_Coin_material_BaseColor.png\", scene);\r\n  tokenMaterialWhite.bumpTexture = new BABYLON.Texture(\"./Textures/Token/Coin_low_Coin_material_Normal.png\", scene);\r\n\r\n  var baseMaterialBlack = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialBlack.diffuseColor = new BABYLON.Color3.Black();\r\n\r\n  var baseMaterialWhite = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatWhite = new BABYLON.StandardMaterial(\"diceMatWhite\", scene);\r\n  diceMatWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatBlack = new BABYLON.StandardMaterial(\"diceMatBlack\", scene);\r\n  diceMatBlack.diffuseColor = new BABYLON.Color3(55 / 255, 71 / 255, 79 / 255);\r\n\r\n  var gameAreaTemplate = 'if( vPositionW.z  < -340.){ discard; } if( vPositionW.z  > 340.){ discard; } if( vPositionW.x  > 450.){ discard; } if( vPositionW.x  < -450.){ discard; }';\r\n\r\n  var moveAreaMat = new CustomMaterial(\"moveAreaMat\", scene);\r\n  moveAreaMat.alpha = 0.25;\r\n  moveAreaMat.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightTransparency = 0.25;\r\n\r\n  var lineOfSightMatW = new CustomMaterial(\"losMatSW\", scene);\r\n  lineOfSightMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatW = new CustomMaterial(\"losMatMW\", scene);\r\n  lineOfSightMMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatW = new CustomMaterial(\"losMatLW\", scene);\r\n  lineOfSightLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatW = new CustomMaterial(\"losMatXLW\", scene);\r\n  lineOfSightXLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMatB = new CustomMaterial(\"losMatSB\", scene);\r\n  lineOfSightMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatB = new CustomMaterial(\"losMatMB\", scene);\r\n  lineOfSightMMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatB = new CustomMaterial(\"losMatLB\", scene);\r\n  lineOfSightLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatB = new CustomMaterial(\"losMatXLB\", scene);\r\n  lineOfSightXLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  //Game initiation\r\n  // Associate Users with teams (teamWhite || teamBlack);\r\n  // example: teamWhite.player = \"@jrej\";\r\n  // example: teamBlack.player = \"@inkito\";\r\n\r\n  var players = {\r\n    teamWhite: {\r\n      player: \"@jrej\",\r\n      army: \"outerRing\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"soldier\", \"soldier\", \"soldier\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    },\r\n    teamBlack: {\r\n      player: \"@inkito\",\r\n      army: \"tabForces\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"soldier\", \"soldier\", \"soldier\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    }\r\n  };\r\n\r\n  // Proceed to initiative roll to decide currentPlayer;\r\n  var currentPlayer = {\r\n    team: \"teamWhite\",\r\n    get player() { return players[this.team].player },\r\n    get army() { return players[this.team].armyStats },\r\n    get startActions() { return players[this.team].startActions },\r\n    get turnActions() { return players[this.team].turnActions },\r\n  };\r\n\r\n  var enemyPlayer = {\r\n    get team() { return currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\" },\r\n    get player() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].player },\r\n    get army() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].armyStats }\r\n  }\r\n\r\n  //Action managers  \r\n  var mapActionManager = new BABYLON.ActionManager(scene);\r\n  var moveActionManager = new BABYLON.ActionManager(scene);\r\n  var teamBlackActionManager = new BABYLON.ActionManager(scene);\r\n  var teamWhiteActionManager = new BABYLON.ActionManager(scene);\r\n\r\n  var actionToken;\r\n\r\n  const importActionTokens = () => {\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      \"\",\r\n      \"./Models/\",\r\n      \"token.babylon\",\r\n      scene,\r\n      function (newMeshes) {\r\n        actionToken = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n        actionToken.position = new BABYLON.Vector3(150, -18, 440);\r\n        actionToken.scaling = new BABYLON.Vector3(800, 900, 800);\r\n        actionToken.name = \"token\"\r\n        actionToken.id = \"token1\"\r\n        actionToken.material = currentPlayer.team === \"teamWhite\" ? tokenMaterialWhite : tokenMaterialBlack;\r\n\r\n        var dx = actionToken.position.x;\r\n        var NB_CLONES = currentPlayer.startActions - 1;\r\n        var actionClone;\r\n        for (var nbclone = 0; nbclone < NB_CLONES; nbclone++) {\r\n          actionClone = actionToken.clone(`token${nbclone + 2}`);\r\n          actionClone.name = \"token\";\r\n          let randomX = Math.floor(Math.random() * 40) + 50;\r\n          actionClone.position.x = dx - randomX;\r\n          actionClone.position.z = actionToken.position.z + Math.floor(Math.random() * 30) - 15;\r\n          dx = dx - randomX;\r\n        };\r\n        players[currentPlayer.team].turnActions = players[currentPlayer.team].startActions;\r\n      }\r\n    );\r\n  }\r\n  importActionTokens();\r\n\r\n  var dice1;\r\n  var dice2;\r\n  var dice3;\r\n  var dice4;\r\n  var dice5;\r\n  var dice6;\r\n  var dice = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice1.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice1.translate(BABYLON.Axis.Y, 30, scene);\r\n      dice1.translate(BABYLON.Axis.X, 175, scene);\r\n      dice1.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice1);\r\n      dice1.id = \"dice1\";\r\n      dice1.name = \"dice\";\r\n      dice1.checkCollisions = true;\r\n      dice1.collisionGroup = 1;\r\n      dice1.collisionMask = 1;\r\n\r\n      dice1.setEnabled(false);\r\n      dice.push(dice1);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice2.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice2 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice2.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice2.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice2.translate(BABYLON.Axis.X, 175, scene);\r\n      dice2.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice2);\r\n      dice2.id = \"dice2\";\r\n      dice2.name = \"dice\";\r\n      dice2.checkCollisions = true;\r\n      dice2.collisionGroup = 1;\r\n      dice2.collisionMask = 1;\r\n\r\n      dice2.setEnabled(false);\r\n      dice.push(dice2);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice3.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice3 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice3.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice3.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice3.translate(BABYLON.Axis.X, 175, scene);\r\n      dice3.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice3);\r\n      dice3.id = \"dice3\";\r\n      dice3.name = \"dice\";\r\n      dice3.checkCollisions = true;\r\n      dice3.collisionGroup = 1;\r\n      dice3.collisionMask = 1;\r\n\r\n      dice3.setEnabled(false);\r\n      dice.push(dice3);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice4.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice4 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice4.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice4.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice4.translate(BABYLON.Axis.X, 175, scene);\r\n      dice4.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice4);\r\n      dice4.id = \"dice4\";\r\n      dice4.name = \"dice\";\r\n      dice4.checkCollisions = true;\r\n      dice4.collisionGroup = 1;\r\n      dice4.collisionMask = 1;\r\n\r\n      dice4.setEnabled(false);\r\n      dice.push(dice4);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice5.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice5 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice5.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice5.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice5.translate(BABYLON.Axis.X, 175, scene);\r\n      dice5.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice5);\r\n      dice5.id = \"dice5\";\r\n      dice5.name = \"dice\";\r\n      dice5.checkCollisions = true;\r\n      dice5.collisionGroup = 1;\r\n      dice5.collisionMask = 1;\r\n\r\n      dice5.setEnabled(false);\r\n      dice.push(dice5);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"dice6.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice6 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice6.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice6.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice6.translate(BABYLON.Axis.X, 175, scene);\r\n      dice6.translate(BABYLON.Axis.Z, 50, scene);\r\n      dice6.rotate(BABYLON.Axis.Y, BABYLON.Tools.ToRadians(90), scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice6);\r\n      dice6.id = \"dice6\";\r\n      dice6.name = \"dice\";\r\n      dice6.checkCollisions = true;\r\n      dice6.collisionGroup = 1;\r\n      dice6.collisionMask = 1;\r\n\r\n      dice6.setEnabled(false);\r\n      dice.push(dice6);\r\n    }\r\n  );\r\n\r\n  var miniWidth = 25.25;\r\n\r\n  var LOS = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSights\", { height: 0.1, diameter: 202 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  LOS.position = new BABYLON.Vector3(0, 100, 0);\r\n  var LOSM = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightm\", { height: 0.1, diameter: 404 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  var LOSL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightl\", { height: 0.1, diameter: 808 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  //var LOSXL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSight\", { height: 0.1, diameter: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2 + miniWidth, tessellation: 256 }, scene);\r\n  /*LOSXL.parent =*/ LOSL.parent = LOSM.parent = LOS;\r\n\r\n  var los = BABYLON.CSG.FromMesh(LOS);\r\n  var losM = BABYLON.CSG.FromMesh(LOSM);\r\n  var losL = BABYLON.CSG.FromMesh(LOSL);\r\n  //var losXL = BABYLON.CSG.FromMesh(LOSXL);\r\n\r\n  var slicer = BABYLON.MeshBuilder.CreateBox(\"LOSTemplate\", { width: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2, height: 2500, depth: 1 }, scene);\r\n  slicer.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n  slicer.position = new BABYLON.Vector3(players[currentPlayer.team].armyStats.units.soldier.maxRange, 100, 0);\r\n  slicer.visibility = 0;\r\n  var slicerCSG = BABYLON.CSG.FromMesh(slicer);\r\n\r\n  //losXL = losXL.subtract(slicerCSG).subtract(losL).subtract(losM).subtract(los);\r\n\r\n  losL = losL.subtract(slicerCSG).subtract(losM).subtract(los);\r\n\r\n  losM = losM.subtract(slicerCSG).subtract(los);\r\n\r\n  los = los.subtract(slicerCSG);\r\n\r\n  var lineOfSight = los.toMesh(\"lineOfSightS\");\r\n  var lineOfSightM = losM.toMesh(\"lineOfSightM\");\r\n  var lineOfSightL = losL.toMesh(\"lineOfSightL\");\r\n  //var lineOfSightXL = losXL.toMesh(\"lineOfSight\");\r\n\r\n  /*lineOfSightXL.parent =*/ lineOfSightL.parent = lineOfSightM.parent = lineOfSight;\r\n  /*lineOfSightXL.isPickable =*/ lineOfSightL.isPickable = lineOfSightM.isPickable = false;\r\n\r\n  lineOfSight.setEnabled(false);\r\n  slicer.dispose();\r\n  LOS.dispose();\r\n  LOSM.dispose();\r\n  LOSL.dispose();\r\n  //LOSXL.dispose();\r\n\r\n\r\n  const getLosColor = (unit, team, range) => {\r\n    var losColorBad = new BABYLON.Color3(164 / 255, 27 / 255, 7 / 255); //red\r\n    var losColorMalus = new BABYLON.Color3(215 / 255, 195 / 255, 58 / 255); //yellow\r\n    var losColorZero = new BABYLON.Color3(7 / 255, 66 / 255, 164 / 255); //blue\r\n    var losColorBonus = new BABYLON.Color3(7 / 255, 164 / 255, 27 / 255); //green\r\n\r\n    if (players[team].armyStats.units[unit].range.mods[range] > 0) {\r\n      return losColorBonus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === 0) {\r\n      return losColorZero;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === -1) {\r\n      return losColorMalus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] <= -2) {\r\n      return losColorBad;\r\n    }\r\n  }\r\n\r\n  var getHeight = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.y * 2 * mesh.scaling.y\r\n  };\r\n\r\n  var getWidth = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.x * 2 * mesh.scaling.x\r\n  };\r\n\r\n  var getLength = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.z * 2 * mesh.scaling.z\r\n  };\r\n\r\n  var blackMini1;\r\n  var blackMini2;\r\n  var blackMini3;\r\n  var blackMini1LOS\r\n  var blackMini2LOS\r\n  var blackMini3LOS\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"STLRW.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      let blackBase1 = BABYLON.MeshBuilder.CreateCylinder(\"whiteBase\", { height: 5.5, diameter: 27, tessellation: 128 }, scene);\r\n      blackBase1.material = baseMaterialBlack;\r\n      blackBase1.translate(BABYLON.Axis.Y, 25, scene);\r\n      blackBase1.translate(BABYLON.Axis.X, -300, scene);\r\n\r\n      blackMini1 = newMeshes[0];\r\n      blackMini1.translate(BABYLON.Axis.Y, 25, scene);\r\n      blackMini1.translate(BABYLON.Axis.X, -300, scene);\r\n      blackMini1.name = \"blackMini\";\r\n      blackMini1.id = \"blackMini1\";\r\n      blackMini1.unit = \"soldier\";\r\n      blackMini1.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      blackMini1.material = miniMaterial;\r\n      blackMini1.actionManager = teamBlackActionManager;\r\n      blackMini1.enablePointerMoveEvents = true;\r\n\r\n      blackMini1.addChild(blackBase1);\r\n\r\n      blackMini1.width = getWidth(blackMini1);\r\n      blackMini1.height = getHeight(blackMini1);\r\n      blackMini1.checkCollisions = true;\r\n      blackMini1.collisionGroup = 1;\r\n      blackMini1.collisionMask = 1;\r\n\r\n\r\n      blackMini1LOS = lineOfSight.clone();\r\n      blackMini1LOS.parent = blackMini1;\r\n      blackMini1LOS.position = new BABYLON.Vector3(0, 1, 0);\r\n      blackMini1LOS.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      blackMini1LOS.setEnabled(false);\r\n      blackMini1LOS.material = lineOfSightMatB;\r\n      blackMini1LOS._children[0].material = lineOfSightMMatB;\r\n      blackMini1LOS._children[1].material = lineOfSightLMatB\r\n      //blackMini1LOS._children[2].material = lineOfSightXLMatB\r\n\r\n      lineOfSightMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"s\"); //blue\r\n      lineOfSightMMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"m\"); //green\r\n      lineOfSightLMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"l\"); //yellow\r\n      //lineOfSightXLMatB.diffuseColor = getLosColor(blackMini1.unit, \"teamBlack\", \"xl\"); //yellow\r\n\r\n      blackMini2 = blackMini1.clone();\r\n      blackMini2.name = \"blackMini\";\r\n      blackMini2.id = \"blackMini2\";\r\n      blackMini2.unit = \"soldier\";\r\n      blackMini2.material = miniMaterial;\r\n      blackMini2.actionManager = teamBlackActionManager;\r\n      blackMini2.translate(BABYLON.Axis.Z, 200, scene);\r\n      blackMini2LOS = blackMini2._children[1];\r\n      blackMini2LOS.setEnabled(false);\r\n\r\n      blackMini3 = blackMini1.clone();\r\n      blackMini3.name = \"blackMini\";\r\n      blackMini3.id = \"blackMini3\";\r\n      blackMini3.unit = \"soldier\";\r\n      blackMini3.material = miniMaterial;\r\n      blackMini3.actionManager = teamBlackActionManager;\r\n      blackMini3.translate(BABYLON.Axis.Z, -200, scene);\r\n      blackMini3LOS = blackMini3._children[1];\r\n      blackMini3LOS.setEnabled(false)\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(blackMini1, blackMini2, blackMini3);\r\n      players.teamBlack.minis.push(blackMini1, blackMini2, blackMini3);\r\n    }\r\n  );\r\n\r\n\r\n  var whiteMini1;\r\n  var whiteMini2;\r\n  var whiteMini3;\r\n  var clonedMini;\r\n  var whiteMini1LOS\r\n  var whiteMini2LOS\r\n  var whiteMini3LOS\r\n  //Consider looping through unit array of team\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"SKNCK.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      let whiteBase1 = BABYLON.MeshBuilder.CreateCylinder(\"whiteBase\", { height: 5.5, diameter: 27, tessellation: 128 }, scene);\r\n      whiteBase1.material = baseMaterialWhite;\r\n      whiteBase1.translate(BABYLON.Axis.Y, 25, scene);\r\n      whiteBase1.translate(BABYLON.Axis.X, 300, scene);\r\n      whiteMini1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      whiteMini1.translate(BABYLON.Axis.Y, 25, scene);\r\n      whiteMini1.translate(BABYLON.Axis.X, 300, scene);\r\n      whiteMini1.rotation.y = BABYLON.Tools.ToRadians(90);\r\n      whiteMini1.name = \"whiteMini\";\r\n      whiteMini1.id = \"whiteMini1\";\r\n      whiteMini1.unit = \"soldier\";\r\n      whiteMini1.material = miniMaterial;\r\n      whiteMini1.checkCollisions = true;\r\n      whiteMini1.actionManager = teamWhiteActionManager;\r\n      whiteMini1.collisionGroup = 1;\r\n      whiteMini1.collisionMask = 1;\r\n\r\n      whiteMini1.addChild(whiteBase1);\r\n      camera.setTarget(whiteMini1);\r\n\r\n      whiteMini1.width = getWidth(whiteMini1);\r\n      whiteMini1.height = getHeight(whiteMini1);\r\n\r\n      whiteMini1LOS = lineOfSight.clone();\r\n      whiteMini1LOS.parent = whiteMini1;\r\n      whiteMini1LOS.position = new BABYLON.Vector3(0, 1, 0);\r\n      whiteMini1LOS.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n      whiteMini1LOS.setEnabled(false);\r\n      whiteMini1LOS.material = lineOfSightMatW;\r\n      whiteMini1LOS._children[0].material = lineOfSightMMatW;\r\n      whiteMini1LOS._children[1].material = lineOfSightLMatW;\r\n      //whiteMini1LOS._children[2].material = lineOfSightXLMatW;\r\n\r\n      lineOfSightMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"s\"); //green\r\n      lineOfSightMMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"m\"); //blue\r\n      lineOfSightLMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"l\"); //yellow\r\n      //lineOfSightXLMatW.diffuseColor = getLosColor(whiteMini1.unit, \"teamWhite\", \"xl\"); //red\r\n\r\n      whiteMini2 = whiteMini1.clone();\r\n      whiteMini2.name = \"whiteMini\";\r\n      whiteMini2.id = \"whiteMini2\";\r\n      whiteMini2.unit = \"soldier\";\r\n      whiteMini2.material = miniMaterial;\r\n      whiteMini2.actionManager = teamWhiteActionManager;\r\n      whiteMini2.translate(BABYLON.Axis.Z, 200, scene);\r\n      whiteMini2LOS = whiteMini2._children[1];\r\n      whiteMini2LOS.setEnabled(false);\r\n\r\n      whiteMini3 = whiteMini1.clone();\r\n      whiteMini3.name = \"whiteMini\";\r\n      whiteMini3.id = \"whiteMini3\";\r\n      whiteMini3.unit = \"soldier\";\r\n      whiteMini3.material = miniMaterial;\r\n      whiteMini3.actionManager = teamWhiteActionManager;\r\n      whiteMini3.translate(BABYLON.Axis.Z, -200, scene);\r\n      whiteMini3LOS = whiteMini3._children[1];\r\n      whiteMini3LOS.setEnabled(false);\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(whiteBase1, whiteMini1, whiteMini2, whiteMini3);\r\n      players.teamWhite.minis.push(whiteMini1, whiteMini2, whiteMini3);\r\n    }\r\n  );\r\n\r\n  var obstacles = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"container.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      var container = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n\r\n      //container.material = diceMaterial;\r\n      container.scaling = new BABYLON.Vector3(2, 2, 2);\r\n      container.translate(BABYLON.Axis.Y, 50, scene);\r\n      container.translate(BABYLON.Axis.X, 150, scene);\r\n      container.translate(BABYLON.Axis.Z, 125, scene);\r\n      container.id = \"obstacle1\";\r\n      container.name = \"obstacle\";\r\n      container.receiveShadows = true;\r\n\r\n      container.width = getWidth(container);\r\n      container.length = getLength(container);\r\n      container.height = getHeight(container);\r\n\r\n      var redMat = new BABYLON.StandardMaterial(scene);\r\n      redMat.diffuseColor = new BABYLON.Color3(0.518, 0.271, 0.267);\r\n\r\n      var greyMat = new BABYLON.StandardMaterial(scene);\r\n      greyMat.diffuseColor = new BABYLON.Color3(0.671, 0.663, 0.733);\r\n\r\n      var greenMat = new BABYLON.StandardMaterial(scene);\r\n      greenMat.diffuseColor = new BABYLON.Color3(0.318, 0.502, 0.43);\r\n\r\n      var container2 = container.clone(\"obstacle\")\r\n      container2.position = new BABYLON.Vector3(200, 50, 125);\r\n      container2.material = greenMat;\r\n\r\n      var container3 = container.clone(\"obstacle\")\r\n      container3.position = new BABYLON.Vector3(100, 50, -125);\r\n      container3.material = redMat;\r\n\r\n      var container4 = container.clone(\"obstacle\")\r\n      container4.position = new BABYLON.Vector3(150, 50, -125);\r\n\r\n      var container5 = container.clone(\"obstacle\")\r\n      container5.position = new BABYLON.Vector3(-100, 50, 125);\r\n\r\n      var container6 = container.clone(\"obstacle\")\r\n      container6.position = new BABYLON.Vector3(-150, 50, 125);\r\n      container6.material = redMat;\r\n\r\n      var container7 = container.clone(\"obstacle\")\r\n      container7.position = new BABYLON.Vector3(-200, 50, -125);\r\n      container7.material = greenMat;\r\n\r\n      var container8 = container.clone(\"obstacle\")\r\n      container8.position = new BABYLON.Vector3(-150, 50, -125);\r\n      container8.material = greyMat;\r\n\r\n      var container9 = container.clone(\"obstacle\")\r\n      container9.position = new BABYLON.Vector3(-175, 100, -150);\r\n      container9.scaling.z = 1;\r\n\r\n      var container10 = container.clone(\"obstacle\")\r\n      container10.position = new BABYLON.Vector3(175, 100, 100);\r\n      container10.scaling.z = 1;\r\n      container10.material = greyMat;\r\n\r\n      var container11 = container.clone(\"obstacle\")\r\n      container11.position = new BABYLON.Vector3(250, 35, 150);\r\n      container11.scaling.z = 1;\r\n      container11.scaling.y = 1;\r\n      container11.material = greyMat;\r\n\r\n      var container12 = container.clone(\"obstacle\")\r\n      container12.position = new BABYLON.Vector3(-250, 35, -100);\r\n      container12.scaling.z = 1;\r\n      container12.scaling.y = 1;\r\n      container12.material = redMat;\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(container, container2, container3, container4, container5, container6, container7, container8, container9, container10, container11, container12);\r\n      obstacles.push(container, container2, container3, container4, container5, container6, container7, container8, container9, container10, container11, container12);\r\n    }\r\n  );\r\n\r\n\r\n  var moveArea = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8, tessellation: 256 }, scene);\r\n  moveArea.material = invisibleMaterial;\r\n  moveArea.actionManager = moveActionManager;\r\n  moveArea.setEnabled(false);\r\n  moveArea.position = new BABYLON.Vector3(0, 27, 0);\r\n\r\n  var moveArea2 = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8 + miniWidth, tessellation: 256 }, scene);\r\n  moveArea2.material = moveAreaMat;\r\n  moveArea2.parent = moveArea;\r\n\r\n  var board;\r\n  var map;\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"./Models/\",\r\n    \"setting.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      board = newMeshes[0];\r\n      board.scaling = new BABYLON.Vector3(1150, 1200, 1000);\r\n      board.material = boardMaterial;\r\n      shadowGenerator.getShadowMap().renderList.push(board);\r\n\r\n      map = BABYLON.MeshBuilder.CreateBox(\"map\", { width: 808, height: 606, depth: 1 }, scene);\r\n      map.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n      map.material = groundMaterial;\r\n      map.receiveShadows = true;\r\n      map.translate(BABYLON.Axis.Y, 25, scene);\r\n      map.actionManager = mapActionManager;\r\n    }\r\n  );\r\n  //board is 24 inch to 32 inch;\r\n\r\n  //Should import action tokens after switching Player\r\n  var switchPlayer = () => {\r\n    if (currentPlayer.team === \"teamWhite\") {\r\n      currentPlayer.team = \"teamBlack\";\r\n      camera.position = new BABYLON.Vector3(-700, 300, 0);\r\n      targetFurthestMini();\r\n    } else if (currentPlayer.team === \"teamBlack\") {\r\n      currentPlayer.team = \"teamWhite\";\r\n      camera.position = new BABYLON.Vector3(700, 300, 0);\r\n      targetFurthestMini();\r\n    }\r\n    importActionTokens();\r\n  };\r\n\r\n  //Mini selected by player1;\r\n  var selected = \"\";\r\n  var rotate = false;\r\n  var previous = {\r\n    position: null,\r\n    rotation: null\r\n  };\r\n\r\n  var selection = function (evt) {\r\n    //left click\r\n    if (evt.sourceEvent.which === 1) {\r\n      let currentMesh = evt.meshUnderPointer;\r\n      scene.hoverCursor = \"pointer\";\r\n      if (selected === currentMesh) {\r\n        moveAction({ skip: true });\r\n        //camera.setTarget(board);\r\n      } else if (currentMesh.id.includes(\"Mini\")) {\r\n        if (selected) {\r\n          hl.removeMesh(selected);\r\n        }\r\n        if (currentPlayer.turnActions > 0) {\r\n          hl.addMesh(currentMesh, BABYLON.Color3.White());\r\n          hl.addMesh(moveArea, BABYLON.Color3.White());\r\n          selected = currentMesh;\r\n          previous.position = selected.position;\r\n          moveArea.position = new BABYLON.Vector3(currentMesh.position.x, currentMesh.position.y + 2, currentMesh.position.z)\r\n          moveArea.setEnabled(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelSelection = () => {\r\n    if (selected && rotate) {\r\n      if (previous.position) {\r\n        selected.position = previous.position;\r\n        selected.rotation = previous.rotation;\r\n        moveArea.setEnabled(true);\r\n        moveArea.position = new BABYLON.Vector3(previous.position.x, previous.position.y + 2, previous.position.z);\r\n        selected._children[1].setEnabled(false);\r\n        canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n        rotate = false;\r\n      }\r\n    } else if (selected && !rotate) {\r\n      moveArea.setEnabled(false);\r\n      hl.removeMesh(selected);\r\n      hl.removeMesh(moveArea);\r\n      scene.removeMesh(clonedMini);\r\n      selected._children[1].setEnabled(false);\r\n      targetFurthestMini();\r\n      selected = \"\";\r\n      scene.hoverCursor = \"pointer\";\r\n      if (clonedMini) {\r\n        clonedMini.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noObstacle = (mini1, mini2) => {\r\n    let origin = new BABYLON.Vector3(mini1.position.x, mini1.position.y + getHeight(mini1) * 0.75, mini1.position.z);\r\n\r\n    let targetLeft = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z - mini2.width / 2 + mini2.width * 0.25);\r\n    let targetRight = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z + mini2.width / 2 - mini2.width * 0.25);\r\n\r\n    let directionLeft = targetLeft.subtract(origin);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = targetRight.subtract(origin);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = BABYLON.Vector3.Distance(mini1.position, mini2.position) - getWidth(mini2) / 2;\r\n\r\n    let rayLeft = new BABYLON.Ray(origin, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(origin, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\")) && hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const isInCover = (mini1, mini2) => {\r\n    let originLeft = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z - mini1.width / 2 + mini1.width * 0.25);\r\n    let originRight = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z + mini1.width / 2 - mini1.width * 0.25);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, mini2.position.y + 5, mini2.position.z);\r\n\r\n    let directionLeft = target.subtract(originLeft);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = target.subtract(originRight);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = mini1.width / 2 + mini1.width;\r\n\r\n    let rayLeft = new BABYLON.Ray(originLeft, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(originRight, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      console.log(mini1.name + \" is in cover!\")\r\n      return true;\r\n    } else if (hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      console.log(mini1.name + \" is in cover!\")\r\n      return true;\r\n    } else {\r\n      console.log(mini1.name + \" is NOT in cover!\")\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const isInAngle = (mini1, mini2) => {\r\n    //Check here if angle forward and target < 90deg\r\n    let forward = forwardDirection(mini1);\r\n\r\n    let origin = new BABYLON.Vector3(mini1.position.x, 55, mini1.position.z);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, 55, mini2.position.z);\r\n\r\n    let directionTarget = target.subtract(origin);\r\n    directionTarget = BABYLON.Vector3.Normalize(directionTarget);\r\n\r\n    if (Math.acos(BABYLON.Vector3.Dot(forward, directionTarget)) * 180 / Math.PI > 90) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    };\r\n  };\r\n\r\n  var handleLineOfSight = (ev) => {\r\n    var enemyTarget = ev.meshUnderPointer;\r\n    if (selected && noObstacle(selected, enemyTarget)) {\r\n      if (enemyTarget.intersectsMesh(selected, false)) {\r\n        //Melee position\r\n        //scene.hoverCursor = \"url('./Cursors/melee.cur') 10 10, auto\";\r\n\r\n      } else if (rangeToTarget(selected, enemyTarget)) {\r\n        selected._children[1].setEnabled(true);\r\n        moveArea.setEnabled(false);\r\n\r\n        //In range position\r\n        //scene.hoverCursor = \"url('./Cursors/aim.cur'), auto\";\r\n      } else if (!enemyTarget.intersectsMesh(selected, false) && !rangeToTarget(selected, enemyTarget)) {\r\n        //scene.hoverCursor = \"url('./Cursors/unavailable.cur') 15 15, auto\";\r\n        moveArea.setEnabled(false);\r\n        selected._children[1].setEnabled(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelLineOfSight = () => {\r\n    if (selected) {\r\n      selected._children[1].setEnabled(false);\r\n      if (!rotate) {\r\n        moveArea.setEnabled(true);\r\n      }\r\n    }\r\n    scene.hoverCursor = \"pointer\";\r\n  }\r\n\r\n  var targetFurthestMini = () => {\r\n    if (players[currentPlayer.team].minis) {\r\n      var miniPosition = players[currentPlayer.team].minis.map(mini => mini.position.x);\r\n      var furthestMiniIndex = currentPlayer.team === \"teamWhite\" ? miniPosition.indexOf(Math.min(...miniPosition)) : miniPosition.indexOf(Math.max(...miniPosition));\r\n      var furthestMini = players[currentPlayer.team].minis[furthestMiniIndex];\r\n      var furthestTarget = BABYLON.Mesh.CreateSphere(\"targetSphere\", { size: 10 }, scene);\r\n      furthestTarget.visibility = 0;\r\n      furthestTarget.position = new BABYLON.Vector3(furthestMini.position.x, furthestMini.position.y, 0);\r\n      camera.setTarget(furthestTarget);\r\n      setTimeout(() => {\r\n        furthestTarget.dispose();\r\n      }, 1100)\r\n    }\r\n  };\r\n\r\n  var diceRoll = (rolls, blackMini, defense, selected) => {\r\n    let arrayResult = [];\r\n    for (let i = 0; i < rolls; i++) {\r\n      arrayResult.push(Math.floor(Math.random() * 6) + 1)\r\n    }\r\n\r\n    return arrayResult;\r\n  }\r\n\r\n  var cloneDice = (rolls, mini, delay) => {\r\n    var dicePosition1 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 30)\r\n    var dicePosition2 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition4 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition6 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 45)\r\n\r\n    var dicePositions = [dicePosition1, dicePosition2, dicePosition3, dicePosition4, dicePosition5, dicePosition6];\r\n\r\n    for (let i = 0; i < rolls.length; i++) {\r\n      var diceIndex = i + 1\r\n      if (mini.name.includes(\"white\")) {\r\n        dice[rolls[i] - 1].material = diceMatWhite;\r\n      } else {\r\n        dice[rolls[i] - 1].material = diceMatBlack;\r\n      }\r\n\r\n      if (rolls.length === 3 && diceIndex === 3) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition3;\r\n      } else if (rolls.length === 5 && diceIndex === 5) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition5;\r\n      } else {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = dicePositions[i];\r\n      }\r\n\r\n\r\n      setTimeout(function () {\r\n        scene.removeMesh(scene.getMeshByName(`diceClone${i}`));\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  var compareRolls = (playerRolls, playerMod, enemyRolls, enemyMod) => {\r\n    //check if rolls successful, remove any unsuccessful rolls\r\n    var playerSuccess = playerRolls.filter(roll => roll + playerMod >= currentPlayer.army.units.soldier.range.success);\r\n    var enemySuccess = enemyRolls.filter(roll => roll + enemyMod >= enemyPlayer.army.units.soldier.range.success);\r\n\r\n    console.log(\"Player rolls:\");\r\n    console.log(playerRolls);\r\n    console.log(\"He has a \" + playerMod + \" modifier to dice roll\");\r\n\r\n\r\n    console.log(\"Enemy rolls:\");\r\n    console.log(enemyRolls);\r\n    console.log(\"He has a \" + enemyMod + \" modifier to dice roll\");\r\n\r\n    console.log(\"Player success rolls:\")\r\n    console.log(playerSuccess);\r\n\r\n    console.log(\"Enemy Success rolls:\")\r\n    console.log(enemySuccess);\r\n    //check if duplicates, remove duplicates player enemy\r\n    //var uniquePlayerRolls = [...playerSuccess];\r\n    //var uniqueEnemyRolls = [...enemySuccess];\r\n\r\n    for (let i = 0; i < playerSuccess.length; i++) {\r\n      for (let j = 0; j < enemySuccess.length; j++) {\r\n        if (playerSuccess[i] === enemySuccess[j]) {\r\n          playerSuccess.splice(i, 1);\r\n          enemySuccess.splice(j, 1)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Math.max(...playerSuccess) > Math.max(...enemySuccess)) {\r\n      //player with the highest numbers win.   \r\n      console.log(\"Player wins with a higher roll!\");\r\n      return \"player\";\r\n    } else if (Math.max(...enemySuccess) > Math.max(...playerSuccess)) {\r\n      console.log(\"Enemy wins with a higher roll!\");\r\n      return \"enemy\";\r\n    } else {\r\n      //if no result left or equal, both miss.\r\n      return null\r\n    }\r\n  }\r\n\r\n  var rangeToTarget = (mini1, mini2) => {\r\n    let rangeResult;\r\n\r\n    let distance = BABYLON.Vector3.Distance(mini1.position, mini2.position) - mini2.width / 2;\r\n    let mini1Team = mini1.name === \"whiteMini\" ? \"teamWhite\" : \"teamBlack\";\r\n    let mini1MaxRange = players[mini1Team].armyStats.units[mini1.unit].maxRange\r\n    //close combat if minis base are within 1 inch\r\n    if (distance <= mini1.width / 2 + mini2.width / 2) {\r\n      rangeResult = \"c\";\r\n      //8 inches\r\n    } else if (distance <= 202) {\r\n      rangeResult = \"s\";\r\n      // between 8 and 16 inches\r\n    } else if (distance > 202 && distance <= 404) {\r\n      rangeResult = \"m\";\r\n      // between 16 and 32 inches\r\n    } else if (distance > 404 && distance <= 808) {\r\n      rangeResult = \"l\";\r\n      // between 32 and max range\r\n    } else if (distance > 808 && distance <= mini1MaxRange) {\r\n      rangeResult = \"xl\";\r\n    } else if (distance > mini1MaxRange) {\r\n      rangeResult = null\r\n    }\r\n\r\n    //check if obstacles between minis;\r\n    //check if angle between mini1 front and mini2 is < 90deg\r\n    if (noObstacle(mini1, mini2) && isInAngle(mini1, mini2)) {\r\n      return rangeResult;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  var isTheGameOver = () => {\r\n    let winner = \"\";\r\n    if (players.teamBlack.startActions === 0 && players.teamWhite.startActions === 0) {\r\n      console.log(\"tie\")\r\n      winner = null;\r\n      console.log(\"Game Over. No Winners this time.\")\r\n    } else if (players.teamBlack.startActions === 0) {\r\n      winner = \"Team White\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else if (players.teamWhite.startActions === 0) {\r\n      winner = \"Team Black\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else {\r\n      winner = undefined;\r\n    }\r\n\r\n    return winner;\r\n  }\r\n\r\n  // Consider the option of choosing multiple targets\r\n  var onAttack = (ev) => {\r\n    let enemyTarget = ev.meshUnderPointer;\r\n    let winner = \"\";\r\n    if (selected) {\r\n      var currentMesh = selected;\r\n      var range = rangeToTarget(selected, enemyTarget);\r\n\r\n      let coverMod = isInCover(selected, enemyTarget) ? 1 : 0;\r\n      var mods = coverMod + currentPlayer.army.units[selected.unit].range.mods[range];\r\n\r\n      let enemyCoverMod = isInCover(enemyTarget, selected) ? 1 : 0;\r\n      let enemyMods = enemyCoverMod + enemyPlayer.army.units[enemyTarget.unit].range.mods[range];\r\n\r\n      if (range && isInAngle(selected, enemyTarget)) {\r\n        if (enemyTarget.intersectsMesh(selected, false) || range === \"c\") {\r\n          //Melee attack\r\n          console.log('Stabbing ' + enemyTarget.id + \" with \" + selected.id)\r\n          console.log(\"Player target roll: \" + currentPlayer.army.units[selected.unit].melee.success + \"+\")\r\n          let meleeRoll = diceRoll(currentPlayer.army.units[selected.unit].melee.roll);\r\n\r\n          //Generate Dice\r\n          cloneDice(meleeRoll, selected, 1000);\r\n\r\n          console.log(\"Enemy target roll: \" + enemyPlayer.army.units[selected.unit].melee.success + \"+\")\r\n          let enemyMeleeRoll = diceRoll(1);\r\n          //Generate Dice\r\n          cloneDice(enemyMeleeRoll, enemyTarget, 1000);\r\n\r\n          winner = compareRolls(meleeRoll, 0, enemyMeleeRoll, 0);\r\n        } else {\r\n          //Range attack\r\n          var rolls = [];\r\n          var modedRolls = [];\r\n          var enemyRolls = [];\r\n          //var modedEnemyRolls = [];\r\n\r\n\r\n          console.log(`Shooting ${enemyTarget.id} with ${selected.id} at range ${range}.`)\r\n          // Check for enemy roll (Should be enemy line of sight when rotation is implemented!)\r\n          console.log(\"Player target roll: \" + currentPlayer.army.units[selected.unit].range.success + \"+\")\r\n\r\n          rolls = diceRoll(currentPlayer.army.units[selected.unit].range.roll);\r\n          //Generate Dice\r\n          cloneDice(rolls, selected, 1000);\r\n\r\n          modedRolls = rolls.map(roll => roll + mods);\r\n\r\n          //Enemy Target Response\r\n          if (rangeToTarget(enemyTarget, selected)) {\r\n            console.log(\"Enemy target roll: \" + enemyPlayer.army.units[enemyTarget.unit].range.success + \"+\")\r\n\r\n            enemyRolls = diceRoll(1);\r\n            //Generate Dice\r\n            cloneDice(enemyRolls, enemyTarget, 1000);\r\n\r\n            winner = compareRolls(rolls, mods, enemyRolls, enemyMods);\r\n          }\r\n\r\n          //No response from enemy (range difference)\r\n          if (!winner) {\r\n            if (modedRolls.some(roll => roll >= currentPlayer.army.units[selected.unit].range.success)) {\r\n              console.log(\"Success! You shot him!\");\r\n              winner = \"player\"\r\n            }\r\n          }\r\n        }\r\n\r\n        //Defense Roll\r\n        if (winner === \"player\") {\r\n          console.log(\"Enemy is hit. Defense roll target: \" + enemyPlayer.army.units[enemyTarget.unit].defense.success + \"+\");\r\n          if (enemyCoverMod > 0) {\r\n            console.log(\"Enemy has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(enemyPlayer.army.units[enemyTarget.unit].defense.roll)\r\n          console.log(\"Enemy rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, enemyTarget, 1250);\r\n          }, 1250);\r\n          //Cover modifiers to add here\r\n          if (defenseRoll.some(roll => roll + enemyCoverMod >= enemyPlayer.army.units[enemyTarget.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. Enemy saved!\");\r\n          } else {\r\n            console.log(\"Enemy killed!\");\r\n            setTimeout(function () {\r\n              enemyTarget.position = new BABYLON.Vector3(Math.floor(Math.random() * 190) - 200, 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              enemyTarget.name = \"decor\";\r\n              enemyTarget.isPickable = false\r\n              players[enemyPlayer.team].minis = players[enemyPlayer.team].minis.filter(mini => mini.id !== enemyTarget.id)\r\n              players[enemyPlayer.team].startActions -= 2\r\n              isTheGameOver();\r\n              cancelSelection();\r\n            }, 2500);\r\n          }\r\n        } else if (winner === \"enemy\") {\r\n          console.log(\"Player is hit. Defense roll target: \" + currentPlayer.army.units[selected.unit].defense.success + \"+\")\r\n          if (coverMod > 0) {\r\n            console.log(\"Player has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(currentPlayer.army.units[selected.unit].defense.roll, undefined, true, selected);\r\n          console.log(\"Player rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, currentMesh, 1250);\r\n          }, 1250);\r\n          if (defenseRoll.some(roll => roll + coverMod >= currentPlayer.army.units[selected.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. Player mini saved!\");\r\n          } else {\r\n            console.log(\"Player killed!\");\r\n            setTimeout(function () {\r\n              camera.target = map;\r\n              currentMesh.position = new BABYLON.Vector3(200 - Math.floor(Math.random() * 190), 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              currentMesh.name = \"decor\";\r\n              currentMesh.isPickable = false\r\n              players[currentPlayer.team].minis = players[currentPlayer.team].minis.filter(mini => mini.id !== currentMesh.id)\r\n              players[currentPlayer.team].startActions -= 2\r\n              isTheGameOver();\r\n              cancelSelection();\r\n            }, 2500);\r\n          }\r\n        } else {\r\n          console.log(\"No winners! Try again.\")\r\n        }\r\n\r\n        players[currentPlayer.team].turnActions -= 1;\r\n        scene.removeMesh(scene.getMeshByName(\"token\"));\r\n        cancelSelection();\r\n\r\n        if (players[currentPlayer.team].turnActions === 0) {\r\n          setTimeout(function () {\r\n            switchPlayer();\r\n          }, 3000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var moveAction = ({ skip }) => {\r\n    if (selected) {\r\n      if (!skip) {\r\n        previous.position = selected.position;\r\n        selected.position = clonedMini.position;\r\n      }\r\n      moveArea.position = new BABYLON.Vector3(selected.position.x, selected.position.y + 2, selected.position.z);\r\n      moveArea.setEnabled(false);\r\n      selected._children[1].setEnabled(true);\r\n      previous.rotation = selected.rotation.clone();\r\n      rotate = true;\r\n    }\r\n  }\r\n\r\n  var forwardDirection = (mini) => {\r\n    let forward = new BABYLON.Vector3(0, 0, -1);\r\n    let direction = mini.getDirection(forward);\r\n    direction.normalize();\r\n    return direction;\r\n  }\r\n\r\n  var rotateOnMouseMove = (evt) => {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      var diffX = selected.position.x - getGroundPosition(evt).x;\r\n      var diffY = selected.position.z - getGroundPosition(evt).z;\r\n      selected.rotation.y = Math.atan2(diffX, diffY);\r\n    }\r\n  }\r\n\r\n  var rotateAction = (evt) => {\r\n    if (evt.which === 1 || evt.sourceEvent.which === 1) {\r\n      if (selected && rotate) {\r\n        players[currentPlayer.team].turnActions -= 1;\r\n        scene.removeMesh(scene.getMeshByName(\"token\"));\r\n        rotate = false;\r\n        previous.position = null;\r\n        previous.rotation = null;\r\n        cancelSelection();\r\n\r\n        if (players[currentPlayer.team].turnActions === 0) {\r\n          setTimeout(function () {\r\n            switchPlayer();\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var onMouseMove = function (evt) {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      let otherMinis = [...players[enemyPlayer.team].minis, ...players[currentPlayer.team].minis.filter(mini => mini.id !== selected.id)];\r\n      //Miniature collision\r\n      if (!otherMinis.some(mini =>\r\n        getGroundPosition(evt).x < mini.position.x + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).x > mini.position.x - getWidth(mini) + 2 &&\r\n        getGroundPosition(evt).z < mini.position.z + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).z > mini.position.z - getWidth(mini) + 2\r\n      )) {\r\n        //Obstacle collision\r\n        if (\r\n          !obstacles.filter(obstacle => getHeight(obstacle) + obstacle.position.y - (getHeight(obstacle) / 2) > getHeight(selected) + selected.position.y).some(obstacle =>\r\n            getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n          )\r\n        ) {\r\n          //game area limits\r\n          if (getGroundPosition(evt).x > -388 && getGroundPosition(evt).x < 388 && getGroundPosition(evt).z > -285 && getGroundPosition(evt).z < 285) {\r\n            //Filtering out obstacles shorter than mini size. Allows vertical move.\r\n            var currentObstacle = obstacles.filter(obstacle => getHeight(obstacle) < getHeight(selected) + selected.position.y - 25).filter(obstacle =>\r\n              getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n            );\r\n            if (currentObstacle && currentObstacle.length > 0) {\r\n              //Vertical move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, getHeight(currentObstacle[0]) + 26, getGroundPosition(evt).z);\r\n            } else {\r\n              //Regular move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, 25, getGroundPosition(evt).z);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var getGroundPosition = function () {\r\n    // Use a predicate to get position on the ground\r\n    var pickinfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) { return mesh === map; });\r\n    if (pickinfo.hit) {\r\n      return pickinfo.pickedPoint;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      clonedMini = selected.clone();\r\n      clonedMini.position = selected.position;\r\n      clonedMini.isPickable = false;\r\n      var clonedMiniLOS = clonedMini._children[1];\r\n      clonedMiniLOS.setEnabled(false);\r\n      blackMini3LOS.setEnabled(false)\r\n\r\n      clonedMini.material = transparentMaterial;\r\n      canvas.addEventListener(\"mousemove\", onMouseMove, false);\r\n      canvas.addEventListener(\"click\", moveAction, false);\r\n    })\r\n  );\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      clonedMini.dispose();\r\n      canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n      canvas.removeEventListener(\"click\", moveAction);\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (selected && rotate) {\r\n        selected._children[1].setEnabled(true);\r\n      }\r\n      if (rotate) {\r\n        canvas.addEventListener(\"mousemove\", rotateOnMouseMove, false);\r\n        canvas.addEventListener(\"click\", rotateAction, false);\r\n      }\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (selected && !rotate) {\r\n        selected._children[1].setEnabled(false);\r\n      }\r\n      canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n      canvas.removeEventListener(\"click\", rotateAction);\r\n    })\r\n  );\r\n\r\n  //Select current player mini\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\" && !rotate) {\r\n        onAttack(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  //LOS on opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        cancelLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n\r\n  //Select current player mini\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\" && !rotate) {\r\n        onAttack(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n\r\n  //LOS on opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        cancelLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  canvas.addEventListener('contextmenu', cancelSelection, false);\r\n  scene.onDispose = function () {\r\n    canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n    canvas.removeEventListener(\"contextmenu\", cancelSelection);\r\n  }\r\n}\r\n\r\nexport default () => (\r\n  <div >\r\n    <SceneComponent className=\"w-full h-full\" antialias onSceneReady={onSceneReady} id='my-canvas' />\r\n  </div>\r\n)","import React from 'react';\nimport './App.css';\nimport Scene from './components/Scene';\n\nconst App = () => (\n  <div className=\"w-full h-full\">\n    <Scene />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}