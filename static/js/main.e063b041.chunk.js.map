{"version":3,"sources":["components/SceneComponent.jsx","components/armies.js","components/Scene.js","App.js","serviceWorker.js","index.js"],"names":["props","reactCanvas","useRef","sceneOptions","antialias","engineOptions","adaptToDeviceRatio","onRender","rest","onSceneReady","useState","loaded","setLoaded","scene","setScene","useEffect","window","resize","getEngine","addEventListener","removeEventListener","engine","Engine","current","stencil","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","dispose","ref","armies","tabForces","units","soldier","class","move","defense","roll","success","melee","range","mods","s","m","l","xl","maxRange","maxInGame","undefined","cost","sysTroops","rebels","outerRing","voidWarriors","BABYLON","AllowMatricesInterpolation","canvas","getRenderingCanvas","advancedTexture","AdvancedDynamicTexture","CreateFullscreenUI","isForeground","camera","ToRadians","attachControl","angularsensibility","checkCollisions","ellipsoid","light","intensity","shadowGenerator","usePoissonSampling","hl","innerGlow","invisibleMaterial","alpha","transparentMaterial","skybox","CreateSphere","diameter","diameterX","skyboxMaterial","backFaceCulling","material","receiveShadows","background","CreateCylinder","height","tessellation","backgroundMaterial","opacityTexture","translate","Y","visibility","boardMaterial","diffuseTexture","bumpTexture","ambientTexture","groundMaterial","specularTexture","miniMaterial","diffuseColor","tokenMaterialBlack","tokenMaterialWhite","Black","White","diceMatWhite","diceMatBlack","diceMatRed","gameAreaTemplate","moveAreaMat","CustomMaterial","Fragment_Custom_Diffuse","lineOfSightMatW","lineOfSightMMatW","lineOfSightLMatW","lineOfSightXLMatW","lineOfSightMatB","lineOfSightMMatB","lineOfSightLMatB","lineOfSightXLMatB","actionToken","dice1","dice2","dice3","dice4","dice5","dice6","players","teamWhite","player","army","this","minis","startActions","turnActions","reduce","acc","value","armyStats","teamBlack","currentPlayer","team","enemyPlayer","mapActionManager","moveActionManager","teamBlackActionManager","teamWhiteActionManager","importActionTokens","ImportMesh","newMeshes","MergeMeshes","position","scaling","name","id","actionClone","dx","x","NB_CLONES","nbclone","clone","randomX","Math","floor","random","z","dice","X","Z","getShadowMap","renderList","push","collisionGroup","collisionMask","setEnabled","rotate","LOS","LOSM","LOSL","parent","los","FromMesh","losM","losL","slicer","CreateBox","width","depth","slicerCSG","subtract","lineOfSight","toMesh","lineOfSightM","shield","getLosColor","unit","losColorBad","losColorMalus","losColorZero","losColorBonus","getHeight","mesh","getBoundingInfo","boundingBox","extendSize","y","getWidth","getLength","getControlByName","_rootContainer","_children","filter","control","asyncForEach","array","callback","a","index","length","clonedMini","importMiniModel","miniName","mini","toLowerCase","rotation","actionManager","enablePointerMoveEvents","base","createBase","miniLOS","losMat","createLOS","miniShield","createShield","setTarget","forEach","obstacles","container","redMat","greyMat","greenMat","container0","container2","container02","container3","container4","container5","container6","container7","container8","container78","container9","container10","container11","container12","moveArea","miniWidth","board","map","moveArea2","switchPlayer","targetFurthestMini","selected","targets","inAttack","previous","cancelTargeting","target","removeMesh","getMeshByName","removeDiceStat","diceAssigned","removeControl","rollButton","selection","evt","sourceEvent","which","currentMesh","meshUnderPointer","hoverCursor","moveAction","skip","includes","addMesh","cancelSelection","rotateOnMouseMove","noObstacle","mini1","mini2","origin","targetLeft","targetRight","directionLeft","Normalize","directionRight","Distance","rayLeft","rayRight","hitsLeft","multiPickWithRay","hitsRight","some","hit","pickedMesh","isInCover","originLeft","originRight","isInAngle","forward","forwardDirection","directionTarget","acos","Dot","PI","whatIsUnderneath","direction","ray","hits","handleLineOfSight","ev","enemyTarget","rangeToTarget","intersectsMesh","cancelLineOfSight","miniPosition","furthestMiniIndex","indexOf","min","max","furthestMini","furthestTarget","size","setTimeout","diceRoll","rolls","arrayResult","i","cloneDice","delay","save","dicePosition1","dicePosition2","dicePosition3","diceOddPosition3","dicePosition4","dicePosition5","diceOddPosition5","dicePositions","diceIndex","compareRolls","mini1Rolls","mini1Mod","mini2Rolls","mini2Mod","mini1Success","mini2Success","console","log","j","splice","rangeResult","distance","mini1Team","mini1MaxRange","isTheGameOver","winner","getMods","higherMod","isHigher","onAttack","response","mini1CoverMod","mini1Mods","mini2CoverMod","mini2Mods","meleeRoll","mini2MeleeRoll","mini1rolls","modedRolls","defenseRoll","isPickable","clearTarget","attackTargets","waitFor","ms","Promise","r","enemyResponse","onWayResponse","enemy","GUI","CreateSimpleButton","color","left","top","cornerRadius","zIndex","onPointerClickObservable","add","obstacleTemplateArea","round","highMat","getMaterialByName","child","getDirection","normalize","preventDefault","getGroundPosition","diffX","diffY","atan2","rotateAction","onMouseMove","obstacle","currentObstacle","pickinfo","pick","pointerX","pointerY","pickedPoint","addTarget","addControl","updateDiceStat","targetColor","createDirectLOS","createDiceStat","targetResponse","diceStat","text","fontFamily","fontSize","linkWithMesh","linkOffsetY","assignTarget","whoHasMoreDice","every","removedTarget","colorArray1","CreateLines","points","colors","updatable","colorArray2","registerAction","OnPointerOverTrigger","OnPointerOutTrigger","OnPickUpTrigger","OnLeftPickTrigger","onDispose","SceneComponent","className","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e063b041.chunk.js","sourcesContent":["import { Engine, Scene } from '@babylonjs/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (window) {\r\n            const resize = () => {\r\n                if (scene) {\r\n                    scene.getEngine().resize();\r\n                }\r\n            }\r\n            window.addEventListener('resize', resize);\r\n\r\n            return () => {\r\n                window.removeEventListener('resize', resize);\r\n            }\r\n        }\r\n    }, [scene]);\r\n\r\n    useEffect(() => {\r\n        if (!loaded) {\r\n            setLoaded(true);\r\n            const engine = new Engine(reactCanvas.current, true, { stencil: true });\r\n            const scene = new Scene(engine, sceneOptions);\r\n            setScene(scene);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            if (scene !== null) {\r\n                scene.dispose();\r\n            }\r\n        }\r\n    }, [loaded, sceneOptions, props, onRender, scene])\r\n\r\n    return (\r\n        <canvas ref={reactCanvas} {...rest} />\r\n    );\r\n}","export const armies = {\r\n    tabForces: {\r\n        units: { \r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 1, success: 3, mods: { s: -1, m: 1, l: 0, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       },   \r\n    },\r\n    sysTroops: {\r\n        units: {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 1, success: 3 },\r\n              range: { roll: 2, success: 4, mods: { s: 0, m: 1, l: -1, xl: -1 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n       }\r\n    },\r\n    rebels: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 2, success: 4 },\r\n              range: { roll: 3, success: 5, mods: { s: 1, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    },\r\n    outerRing: {\r\n        units : {\r\n          soldier: {\r\n            class: \"FS\",\r\n            move: 4,\r\n            defense: { roll: 1, success: 4 },\r\n            melee: { roll: 2, success: 3 },\r\n            range: { roll: 1, success: 3, mods: { s: 1, m: 0, l: -2, xl: -2 } },\r\n            maxRange: 1212,\r\n            maxInGame: undefined,\r\n            cost: 10\r\n         }\r\n       }    \r\n    },\r\n    voidWarriors: {\r\n        units : {\r\n          soldier: {\r\n              class: \"FS\",\r\n              move: 4,\r\n              defense: { roll: 1, success: 4 },\r\n              melee: { roll: 4, success: 5 },\r\n              range: { roll: 3, success: 5, mods: { s: 0, m: 0, l: -1, xl: -2 } },\r\n              maxRange: 1212,\r\n              maxInGame: undefined,\r\n              cost: 10\r\n          }\r\n        }\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport * as BABYLON from '@babylonjs/core';\r\nimport * as GUI from '@babylonjs/gui';\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D';\r\nimport { CustomMaterial } from '@babylonjs/materials';\r\nimport SceneComponent from './SceneComponent';\r\nimport { armies } from './armies';\r\nimport '../App.css';\r\n\r\nBABYLON.Animation.AllowMatricesInterpolation = true;\r\n\r\nvar publicURL = \"\";\r\nif (process.env.NODE_ENV === \"development\") {\r\n  publicURL = process.env.PUBLIC_URL;\r\n}\r\n\r\n\r\nconst onSceneReady = scene => {\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n  var advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\r\n    \"sceneUI\"\r\n  );\r\n  advancedTexture.isForeground = true;\r\n\r\n  var camera = new BABYLON.ArcRotateCamera(\"arcCamera\",\r\n    BABYLON.Tools.ToRadians(0),\r\n    BABYLON.Tools.ToRadians(100),\r\n    780, new BABYLON.Vector3(-60, 400, 0), scene\r\n  );\r\n  //Setting up camera         \r\n  camera.attachControl(canvas, true);\r\n  camera.angularsensibility *= -1;\r\n  camera.checkCollisions = true;\r\n  camera.ellipsoid = new BABYLON.Vector3(1.5, 1, 1.5);\r\n\r\n  //Setting lights and shadows\r\n  var light = new BABYLON.PointLight(\"pointLight\", new BABYLON.Vector3(75, 400, 150), scene);\r\n  light.intensity = 1;\r\n  light.range = 5000;\r\n\r\n  var light2 = new BABYLON.HemisphericLight(\"hemiLight\", new BABYLON.Vector3(0, -4900, 0), scene);\r\n  //Colored backlight => \r\n  //light2.diffuse = new BABYLON.Color3(0.3, 0.2, 0.9);\r\n  light2.intensity = 0.7;\r\n\r\n  var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\r\n  shadowGenerator.usePoissonSampling = true;\r\n\r\n  var hl = new BABYLON.HighlightLayer(\"hl1\", scene);\r\n  hl.innerGlow = false;\r\n\r\n  //Materials;\r\n  var invisibleMaterial = new BABYLON.StandardMaterial(\"invisibleMaterial\", scene);\r\n  invisibleMaterial.alpha = 0;\r\n\r\n  var transparentMaterial = new BABYLON.StandardMaterial(\"transparentMaterial\", scene);\r\n  transparentMaterial.alpha = 0.5;\r\n\r\n  var skybox = BABYLON.MeshBuilder.CreateSphere(\"skyBox\", { diameter: 5500, diameterX: 5500 }, scene);\r\n  var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n  skyboxMaterial.backFaceCulling = false;\r\n  skybox.material = skyboxMaterial;\r\n  skybox.receiveShadows = true;\r\n\r\n  var background = BABYLON.MeshBuilder.CreateCylinder(\"background\", { height: 1, diameter: 5000, tessellation: 5000 }, scene);\r\n  var backgroundMaterial = new BABYLON.StandardMaterial(\"background\", scene);\r\n  backgroundMaterial.opacityTexture = new BABYLON.Texture(`.${publicURL}/Textures/OpacityTemplate.png`, scene);\r\n  backgroundMaterial.backFaceCulling = false;\r\n  background.material = backgroundMaterial;\r\n  background.translate(BABYLON.Axis.Y, -1, scene);\r\n  background.visibility = 0.4;\r\n  background.receiveShadows = true;\r\n\r\n  var boardMaterial = new BABYLON.StandardMaterial(\"boardMaterial\", scene);\r\n  boardMaterial.diffuseTexture = new BABYLON.Texture(`.${publicURL}/Textures/Wood/Wood_021_basecolor.jpg`, scene);\r\n  boardMaterial.bumpTexture = new BABYLON.Texture(`.${publicURL}/Textures/Wood/Wood_021_normal.jpg`, scene);\r\n  boardMaterial.ambientTexture = new BABYLON.Texture(`.${publicURL}/Textures/Wood/Wood_021_ambientOcclusion.jpg`, scene);\r\n\r\n  var groundMaterial = new BABYLON.StandardMaterial(\"asphaltMaterial\", scene);\r\n  groundMaterial.diffuseTexture = new BABYLON.Texture(`.${publicURL}/Textures/Asphalt/Asphalt_001_COLOR.jpg`, scene);\r\n  groundMaterial.bumpTexture = new BABYLON.Texture(`.${publicURL}/Textures/Asphalt/Asphalt_001_NRM.jpg`, scene);\r\n  groundMaterial.specularTexture = new BABYLON.Texture(`.${publicURL}/Textures/Asphalt/Asphalt_001_SPEC.jpg`, scene);\r\n  groundMaterial.ambientTexture = new BABYLON.Texture(`.${publicURL}/Textures/Asphalt/Asphalt_001_OCC.jpg`, scene);\r\n\r\n  var miniMaterial = new BABYLON.StandardMaterial(\"plasticMaterial\", scene);\r\n  miniMaterial.diffuseColor = new BABYLON.Color3(220 / 255, 220 / 255, 220 / 255);\r\n\r\n  var tokenMaterialBlack = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialBlack.diffuseTexture = new BABYLON.Texture(`.${publicURL}/Textures/Token/Coin_low_Coin_material_BaseColor2.png`, scene);\r\n  tokenMaterialBlack.bumpTexture = new BABYLON.Texture(`.${publicURL}/Textures/Token/Coin_low_Coin_material_Normal.png`, scene);\r\n\r\n  var tokenMaterialWhite = new BABYLON.StandardMaterial(\"tokenMaterial\", scene);\r\n  tokenMaterialWhite.diffuseTexture = new BABYLON.Texture(`.${publicURL}/Textures/Token/Coin_low_Coin_material_BaseColor.png`, scene);\r\n  tokenMaterialWhite.bumpTexture = new BABYLON.Texture(`.${publicURL}/Textures/Token/Coin_low_Coin_material_Normal.png`, scene);\r\n\r\n  var baseMaterialBlack = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialBlack.diffuseColor = new BABYLON.Color3.Black();\r\n\r\n  var baseMaterialWhite = new BABYLON.StandardMaterial(\"baseMaterial\", scene);\r\n  baseMaterialWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatWhite = new BABYLON.StandardMaterial(\"diceMatWhite\", scene);\r\n  diceMatWhite.diffuseColor = new BABYLON.Color3.White();\r\n\r\n  var diceMatBlack = new BABYLON.StandardMaterial(\"diceMatBlack\", scene);\r\n  //diceMatBlack.diffuseColor = new BABYLON.Color3(55 / 255, 71 / 255, 79 / 255);\r\n  diceMatBlack.diffuseColor = new BABYLON.Color3.Black();\r\n\r\n  var diceMatRed = new BABYLON.StandardMaterial(\"diceMatRed\", scene);\r\n  diceMatRed.diffuseColor = new BABYLON.Color3(164 / 255, 27 / 255, 7 / 255);\r\n\r\n  var gameAreaTemplate = 'if( vPositionW.z  < -340.){ discard; } if( vPositionW.z  > 340.){ discard; } if( vPositionW.x  > 450.){ discard; } if( vPositionW.x  < -450.){ discard; }';\r\n\r\n  var moveAreaMat = new CustomMaterial(\"moveAreaMat\", scene);\r\n  moveAreaMat.alpha = 0.25;\r\n  moveAreaMat.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightTransparency = 0.25;\r\n\r\n  var lineOfSightMatW = new CustomMaterial(\"losMatSW\", scene);\r\n  lineOfSightMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatW = new CustomMaterial(\"losMatMW\", scene);\r\n  lineOfSightMMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatW = new CustomMaterial(\"losMatLW\", scene);\r\n  lineOfSightLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatW = new CustomMaterial(\"losMatXLW\", scene);\r\n  lineOfSightXLMatW.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatW.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMatB = new CustomMaterial(\"losMatSB\", scene);\r\n  lineOfSightMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightMMatB = new CustomMaterial(\"losMatMB\", scene);\r\n  lineOfSightMMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightMMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightLMatB = new CustomMaterial(\"losMatLB\", scene);\r\n  lineOfSightLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  var lineOfSightXLMatB = new CustomMaterial(\"losMatXLB\", scene);\r\n  lineOfSightXLMatB.alpha = lineOfSightTransparency;\r\n  lineOfSightXLMatB.Fragment_Custom_Diffuse(gameAreaTemplate);\r\n\r\n  //Game initiation\r\n  // Associate Users with teams (teamWhite || teamBlack);\r\n  // example: teamWhite.player = \"@jrej\";\r\n  // example: teamBlack.player = \"@inkito\";\r\n\r\n  var players = {\r\n    teamWhite: {\r\n      player: \"@jrej\",\r\n      army: \"rebels\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"OTTMK\", \"OTTMK\", \"OTTMK\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    },\r\n    teamBlack: {\r\n      player: \"@inkito\",\r\n      army: \"tabForces\",\r\n      get armyStats() { return armies[this.army] },\r\n      units: [\"STLRW\", \"STLRW\", \"STLRW\"],\r\n      minis: [],\r\n      startActions: 6,\r\n      turnActions: 6,\r\n      //Army value would be calculated at the time of unit selection\r\n      get armyValue() { return this.units.reduce((acc, value) => { return acc + this.armyStats[\"units\"][value][\"cost\"] }, 0) }\r\n    }\r\n  };\r\n\r\n  // Proceed to initiative roll to decide currentPlayer;\r\n  var currentPlayer = {\r\n    team: \"teamWhite\",\r\n    get player() { return players[this.team].player },\r\n    get army() { return players[this.team].armyStats },\r\n    get startActions() { return players[this.team].startActions },\r\n    get turnActions() { return players[this.team].turnActions },\r\n  };\r\n\r\n  var enemyPlayer = {\r\n    get team() { return currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\" },\r\n    get player() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].player },\r\n    get army() { return players[currentPlayer.team === \"teamWhite\" ? \"teamBlack\" : \"teamWhite\"].armyStats }\r\n  }\r\n\r\n  //Action managers  \r\n  var mapActionManager = new BABYLON.ActionManager(scene);\r\n  var moveActionManager = new BABYLON.ActionManager(scene);\r\n  var teamBlackActionManager = new BABYLON.ActionManager(scene);\r\n  var teamWhiteActionManager = new BABYLON.ActionManager(scene);\r\n\r\n  var actionToken;\r\n\r\n  const importActionTokens = () => {\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      \"\",\r\n      `.${publicURL}/Models/`,\r\n      \"token.babylon\",\r\n      scene,\r\n      function (newMeshes) {\r\n        actionToken = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n        actionToken.position = new BABYLON.Vector3(150, -18, 440);\r\n        actionToken.scaling = new BABYLON.Vector3(800, 900, 800);\r\n        actionToken.name = \"token\"\r\n        actionToken.id = \"token1\"\r\n        actionToken.material = currentPlayer.team === \"teamWhite\" ? tokenMaterialWhite : tokenMaterialBlack;\r\n\r\n        var dx = actionToken.position.x;\r\n        var NB_CLONES = currentPlayer.startActions - 1;\r\n        var actionClone;\r\n        for (var nbclone = 0; nbclone < NB_CLONES; nbclone++) {\r\n          actionClone = actionToken.clone(`token${nbclone + 2}`);\r\n          actionClone.name = \"token\";\r\n          let randomX = Math.floor(Math.random() * 40) + 50;\r\n          actionClone.position.x = dx - randomX;\r\n          actionClone.position.z = actionToken.position.z + Math.floor(Math.random() * 30) - 15;\r\n          dx = dx - randomX;\r\n        };\r\n        players[currentPlayer.team].turnActions = players[currentPlayer.team].startActions;\r\n      }\r\n    );\r\n  }\r\n  importActionTokens();\r\n\r\n  var dice1;\r\n  var dice2;\r\n  var dice3;\r\n  var dice4;\r\n  var dice5;\r\n  var dice6;\r\n  var dice = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice1 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice1.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice1.translate(BABYLON.Axis.Y, 30, scene);\r\n      dice1.translate(BABYLON.Axis.X, 175, scene);\r\n      dice1.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice1);\r\n      dice1.id = \"dice1\";\r\n      dice1.name = \"dice\";\r\n      dice1.checkCollisions = true;\r\n      dice1.collisionGroup = 1;\r\n      dice1.collisionMask = 1;\r\n\r\n      dice1.setEnabled(false);\r\n      dice.push(dice1);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice2.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice2 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice2.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice2.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice2.translate(BABYLON.Axis.X, 175, scene);\r\n      dice2.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice2);\r\n      dice2.id = \"dice2\";\r\n      dice2.name = \"dice\";\r\n      dice2.checkCollisions = true;\r\n      dice2.collisionGroup = 1;\r\n      dice2.collisionMask = 1;\r\n\r\n      dice2.setEnabled(false);\r\n      dice.push(dice2);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice3.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice3 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice3.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice3.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice3.translate(BABYLON.Axis.X, 175, scene);\r\n      dice3.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice3);\r\n      dice3.id = \"dice3\";\r\n      dice3.name = \"dice\";\r\n      dice3.checkCollisions = true;\r\n      dice3.collisionGroup = 1;\r\n      dice3.collisionMask = 1;\r\n\r\n      dice3.setEnabled(false);\r\n      dice.push(dice3);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice4.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice4 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice4.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice4.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice4.translate(BABYLON.Axis.X, 175, scene);\r\n      dice4.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice4);\r\n      dice4.id = \"dice4\";\r\n      dice4.name = \"dice\";\r\n      dice4.checkCollisions = true;\r\n      dice4.collisionGroup = 1;\r\n      dice4.collisionMask = 1;\r\n\r\n      dice4.setEnabled(false);\r\n      dice.push(dice4);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice5.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice5 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice5.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice5.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice5.translate(BABYLON.Axis.X, 175, scene);\r\n      dice5.translate(BABYLON.Axis.Z, 50, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice5);\r\n      dice5.id = \"dice5\";\r\n      dice5.name = \"dice\";\r\n      dice5.checkCollisions = true;\r\n      dice5.collisionGroup = 1;\r\n      dice5.collisionMask = 1;\r\n\r\n      dice5.setEnabled(false);\r\n      dice.push(dice5);\r\n    }\r\n  );\r\n\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"dice6.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      dice6 = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      dice6.scaling = new BABYLON.Vector3(20, 20, 20);\r\n      dice6.translate(BABYLON.Axis.Y, 33, scene);\r\n      dice6.translate(BABYLON.Axis.X, 175, scene);\r\n      dice6.translate(BABYLON.Axis.Z, 50, scene);\r\n      dice6.rotate(BABYLON.Axis.Y, BABYLON.Tools.ToRadians(90), scene);\r\n      shadowGenerator.getShadowMap().renderList.push(dice6);\r\n      dice6.id = \"dice6\";\r\n      dice6.name = \"dice\";\r\n      dice6.checkCollisions = true;\r\n      dice6.collisionGroup = 1;\r\n      dice6.collisionMask = 1;\r\n\r\n      dice6.setEnabled(false);\r\n      dice.push(dice6);\r\n    }\r\n  );\r\n\r\n  var miniWidth = 25.25;\r\n\r\n  var LOS = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSights\", { height: 0.1, diameter: 202 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  LOS.position = new BABYLON.Vector3(0, -100, 0);\r\n  var LOSM = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightm\", { height: 0.1, diameter: 404 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  var LOSL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSightl\", { height: 0.1, diameter: 808 * 2 + miniWidth, tessellation: 256 }, scene);\r\n  //var LOSXL = BABYLON.MeshBuilder.CreateCylinder(\"lineOfSight\", { height: 0.1, diameter: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2 + miniWidth, tessellation: 256 }, scene);\r\n  /*LOSXL.parent =*/ LOSL.parent = LOSM.parent = LOS;\r\n\r\n  var los = BABYLON.CSG.FromMesh(LOS);\r\n  var losM = BABYLON.CSG.FromMesh(LOSM);\r\n  var losL = BABYLON.CSG.FromMesh(LOSL);\r\n  //var losXL = BABYLON.CSG.FromMesh(LOSXL);\r\n\r\n  var slicer = BABYLON.MeshBuilder.CreateBox(\"LOSTemplate\", { width: players[currentPlayer.team].armyStats.units.soldier.maxRange * 2, height: 2500, depth: 1 }, scene);\r\n  slicer.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n  slicer.position = new BABYLON.Vector3(players[currentPlayer.team].armyStats.units.soldier.maxRange, -100, 0);\r\n  slicer.visibility = 0;\r\n  var slicerCSG = BABYLON.CSG.FromMesh(slicer);\r\n\r\n  //losXL = losXL.subtract(slicerCSG).subtract(losL).subtract(losM).subtract(los);\r\n\r\n  losL = losL.subtract(slicerCSG).subtract(losM).subtract(los);\r\n\r\n  losM = losM.subtract(slicerCSG).subtract(los);\r\n\r\n  los = los.subtract(slicerCSG);\r\n\r\n  var lineOfSight = los.toMesh(\"lineOfSightS\");\r\n  var lineOfSightM = losM.toMesh(\"lineOfSightM\");\r\n  var lineOfSightL = losL.toMesh(\"lineOfSightL\");\r\n  //var lineOfSightXL = losXL.toMesh(\"lineOfSight\");\r\n\r\n  /*lineOfSightXL.parent =*/ lineOfSightL.parent = lineOfSightM.parent = lineOfSight;\r\n  /*lineOfSightXL.isPickable =*/ //lineOfSightL.isPickable = lineOfSightM.isPickable = lineOfSight.isPickable = false;\r\n\r\n  lineOfSight.setEnabled(false);\r\n  slicer.dispose();\r\n  LOS.dispose();\r\n  LOSM.dispose();\r\n  LOSL.dispose();\r\n  //LOSXL.dispose();\r\n\r\n\r\n  const getLosColor = (unit, team, range) => {\r\n    var losColorBad = new BABYLON.Color3(164 / 255, 27 / 255, 7 / 255); //red\r\n    var losColorMalus = new BABYLON.Color3(215 / 255, 195 / 255, 58 / 255); //yellow\r\n    var losColorZero = new BABYLON.Color3(7 / 255, 66 / 255, 164 / 255); //blue\r\n    var losColorBonus = new BABYLON.Color3(7 / 255, 164 / 255, 27 / 255); //green\r\n\r\n    if (players[team].armyStats.units[unit].range.mods[range] > 0) {\r\n      return losColorBonus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === 0) {\r\n      return losColorZero;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] === -1) {\r\n      return losColorMalus;\r\n    } else if (players[team].armyStats.units[unit].range.mods[range] <= -2) {\r\n      return losColorBad;\r\n    }\r\n  }\r\n\r\n  const getHeight = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.y * 2 * mesh.scaling.y\r\n  };\r\n\r\n  const getWidth = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.x * 2 * mesh.scaling.x\r\n  };\r\n\r\n  const getLength = (mesh) => {\r\n    return mesh.getBoundingInfo().boundingBox.extendSize.z * 2 * mesh.scaling.z\r\n  };\r\n\r\n  const getControlByName = (name) => {\r\n    return advancedTexture._rootContainer._children.filter(control => control.name === name)[0]\r\n  }\r\n\r\n  async function asyncForEach(array, callback) {\r\n    for (let index = 0; index < array.length; index++) {\r\n      await callback(array[index], index, array);\r\n    }\r\n  }\r\n\r\n  var shield;\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"shield.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      shield = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n      shield.scaling = new BABYLON.Vector3(6, 5, 10);\r\n      shield.translate(BABYLON.Axis.Y, 80, scene);\r\n      shadowGenerator.getShadowMap().renderList.push(shield);\r\n      shield.id = \"shield\";\r\n      shield.name = \"shield\";\r\n\r\n      shield.setEnabled(false);\r\n    }\r\n  );\r\n\r\n  /*const createTextPlane = (mini) => {\r\n    let miniPlane = new BABYLON.Mesh.CreatePlane(`${mini.id}TextPlane`, 150, scene, true);\r\n    miniPlane.material = new BABYLON.StandardMaterial(`${mini.id}TextMat`, scene);\r\n    miniPlane.material.diffuseTexture = new BABYLON.DynamicTexture(`${mini.id}DynamicTexture`, { width: 100, height: 100 }, scene);\r\n    miniPlane.material.diffuseTexture.hasAlpha = true;\r\n    miniPlane.position = new BABYLON.Vector3(0, 40, 0);\r\n    miniPlane.parent = mini;\r\n    return miniPlane;\r\n  };*/\r\n\r\n  const createBase = (mini, team) => {\r\n    let base = BABYLON.MeshBuilder.CreateCylinder(`${mini.id}Base`, { height: 2.5, diameter: 27, tessellation: 128 }, scene);\r\n    base.material = new BABYLON.StandardMaterial(`baseMaterial${mini.id}`, scene);\r\n    base.material.diffuseColor = team === \"Black\" ? new BABYLON.Color3.Black() : new BABYLON.Color3.White();\r\n    base.position = new BABYLON.Vector3(0, 1.5, 0);\r\n    base.parent = mini;\r\n    return base;\r\n  };\r\n\r\n  const createLOS = (mini, team) => {\r\n    var miniLOS = lineOfSight.clone();\r\n    miniLOS.id = `${mini.id}lineOfSight`;\r\n    miniLOS.name = `${mini.id}lineOfSight`;\r\n    miniLOS.parent = mini;\r\n    miniLOS.position = new BABYLON.Vector3(0, 1, 0);\r\n    miniLOS.rotation.y = BABYLON.Tools.ToRadians(-90);\r\n    miniLOS.setEnabled(false);\r\n    miniLOS.material = team === \"Black\" ? lineOfSightMatB : lineOfSightMatW;\r\n    miniLOS._children[0].material = team === \"Black\" ? lineOfSightMMatB : lineOfSightMMatW;\r\n    miniLOS._children[1].material = team === \"Black\" ? lineOfSightLMatB : lineOfSightLMatW;\r\n    //miniLOS._children[2].material = team === \"Black\" ? lineOfSightXLMatB : lineOfSightXLMatW;\r\n    if (team === \"Black\") {\r\n      mini.losMat = [lineOfSightMatB.name, lineOfSightMMatB.name, lineOfSightLMatB.name, lineOfSightXLMatB.name]\r\n      lineOfSightMatB.diffuseColor = getLosColor(mini.unit, `team${team}`, \"s\"); //blue\r\n      lineOfSightMMatB.diffuseColor = getLosColor(mini.unit, `team${team}`, \"m\"); //green\r\n      lineOfSightLMatB.diffuseColor = getLosColor(mini.unit, `team${team}`, \"l\"); //yellow\r\n      //lineOfSightXLMatB.diffuseColor = getLosColor(mini.unit, `team${team}`, \"xl\"); //yellow  \r\n    } else {\r\n      mini.losMat = [lineOfSightMatW.name, lineOfSightMMatW.name, lineOfSightLMatW.name, lineOfSightXLMatW.name]\r\n      lineOfSightMatW.diffuseColor = getLosColor(mini.unit, `team${team}`, \"s\"); //blue\r\n      lineOfSightMMatW.diffuseColor = getLosColor(mini.unit, `team${team}`, \"m\"); //green\r\n      lineOfSightLMatW.diffuseColor = getLosColor(mini.unit, `team${team}`, \"l\"); //yellow\r\n      //lineOfSightXLMatW.diffuseColor = getLosColor(mini.unit, `team${team}`, \"xl\"); //yellow\r\n    }\r\n    return miniLOS;\r\n  };\r\n\r\n  const createShield = (mini, team) => {\r\n    let miniShield = shield.clone(`${mini.id}shield`);\r\n    miniShield.material = new BABYLON.StandardMaterial(`shieldMaterial${mini.id}`, scene);\r\n    miniShield.material.diffuseColor = team === \"Black\" ? new BABYLON.Color3.Black() : new BABYLON.Color3.White();\r\n    miniShield.parent = mini;\r\n    miniShield.position = new BABYLON.Vector3(0, 55, 0);\r\n    miniShield.setEnabled(false);\r\n    return miniShield;\r\n  }\r\n  var clonedMini;\r\n  //STLRW\r\n  const importMiniModel = (miniName, team, index) => {\r\n    BABYLON.SceneLoader.ImportMesh(\r\n      \"\",\r\n      `.${publicURL}/Models/`,\r\n      `${miniName}.babylon`,\r\n      scene,\r\n      function (newMeshes) {\r\n        let mini = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n        mini.translate(BABYLON.Axis.Y, 25, scene);\r\n        mini.translate(BABYLON.Axis.X, team === \"Black\" ? -300 : 300, scene);\r\n        mini.translate(BABYLON.Axis.Z, -200 + 200 * index, scene);\r\n        mini.name = `${team.toLowerCase()}Mini`;\r\n        mini.id = `${team.toLowerCase()}Mini${index + 1}`;\r\n        mini.unit = \"soldier\";\r\n        mini.team = `team${team}`;\r\n        mini.rotation.y = team === \"Black\" ? BABYLON.Tools.ToRadians(-90) : BABYLON.Tools.ToRadians(90);\r\n        mini.material = miniMaterial;\r\n        mini.actionManager = team === \"Black\" ? teamBlackActionManager : teamWhiteActionManager;\r\n        mini.enablePointerMoveEvents = true;\r\n\r\n        mini.width = getWidth(mini);\r\n        mini.height = getHeight(mini);\r\n\r\n        createBase(mini, team);\r\n        createLOS(mini, team);\r\n        createShield(mini, team);\r\n        //createTextPlane(mini);\r\n\r\n        shadowGenerator.getShadowMap().renderList.push(mini);\r\n        players[`team${team}`].minis.push(mini);\r\n        if (players.teamWhite.minis && players.teamWhite.minis.length > 1) {\r\n          camera.setTarget(players.teamWhite.minis[1]);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  const importAllModels = () => {\r\n    players.teamBlack.units.forEach((miniName, index) => importMiniModel(miniName, \"Black\", index))\r\n    players.teamWhite.units.forEach((miniName, index) => importMiniModel(miniName, \"White\", index))\r\n  }\r\n  importAllModels();\r\n\r\n  var obstacles = [];\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    `.${publicURL}/Models/`,\r\n    \"container.babylon\",\r\n    scene,\r\n    function (newMeshes) {\r\n      var container = BABYLON.Mesh.MergeMeshes(newMeshes);\r\n\r\n      //container.material = diceMaterial;\r\n      container.scaling = new BABYLON.Vector3(2, 2, 2);\r\n      container.id = \"obstacle1\";\r\n      container.name = \"obstacle\";\r\n      container.receiveShadows = true;\r\n\r\n      container.width = getWidth(container);\r\n      container.length = getLength(container);\r\n      container.height = getHeight(container);\r\n\r\n      var redMat = new BABYLON.StandardMaterial(scene);\r\n      redMat.diffuseColor = new BABYLON.Color3(0.518, 0.271, 0.267);\r\n\r\n      var greyMat = new BABYLON.StandardMaterial(scene);\r\n      greyMat.diffuseColor = new BABYLON.Color3(0.671, 0.663, 0.733);\r\n\r\n      var greenMat = new BABYLON.StandardMaterial(scene);\r\n      greenMat.diffuseColor = new BABYLON.Color3(0.318, 0.502, 0.43);\r\n\r\n      var container0 = container.clone(\"obstacle\")\r\n      container0.position = new BABYLON.Vector3(22, 0, 2.5);\r\n      var container2 = container.clone(\"obstacle\")\r\n      container2.position = new BABYLON.Vector3(-22, 0, 2.5);\r\n\r\n      var container02 = BABYLON.Mesh.MergeMeshes([container0, container2]);\r\n      container02.material = redMat;\r\n      container02.name = container02.id = \"obstacle\";\r\n      container02.position = new BABYLON.Vector3(180, 50, 125);\r\n      container0.dispose();\r\n      container2.dispose();\r\n\r\n      var container3 = container.clone(\"obstacle\")\r\n      container3.position = new BABYLON.Vector3(100, 50, -125);\r\n      container3.material = redMat;\r\n\r\n      var container4 = container.clone(\"obstacle\")\r\n      container4.position = new BABYLON.Vector3(150, 50, -125);\r\n\r\n      var container5 = container.clone(\"obstacle\")\r\n      container5.position = new BABYLON.Vector3(-100, 50, 125);\r\n\r\n      var container6 = container.clone(\"obstacle\")\r\n      container6.position = new BABYLON.Vector3(-150, 50, 125);\r\n      container6.material = redMat;\r\n\r\n      var container7 = container.clone(\"obstacle\")\r\n      container7.position = new BABYLON.Vector3(22, 0, 2.5);\r\n\r\n      var container8 = container.clone(\"obstacle\")\r\n      container8.position = new BABYLON.Vector3(-22, 0, 2.5);\r\n\r\n      var container78 = BABYLON.Mesh.MergeMeshes([container7, container8]);\r\n      container78.material = greenMat;\r\n      container78.name = container78.id = \"obstacle\";\r\n      container78.position = new BABYLON.Vector3(-180, 50, -125);\r\n      container7.dispose();\r\n      container8.dispose();\r\n\r\n      var container9 = container.clone(\"obstacle\")\r\n      container9.position = new BABYLON.Vector3(-180, 100, -150);\r\n      container9.scaling.z = 1;\r\n\r\n      var container10 = container.clone(\"obstacle\")\r\n      container10.position = new BABYLON.Vector3(180, 100, 100);\r\n      container10.scaling.z = 1;\r\n      container10.material = greyMat;\r\n\r\n      var container11 = container.clone(\"obstacle\")\r\n      container11.position = new BABYLON.Vector3(250, 38, 150);\r\n      container11.scaling.z = 1;\r\n      container11.scaling.y = 1;\r\n      container11.material = greenMat;\r\n\r\n      var container12 = container.clone(\"obstacle\")\r\n      container12.position = new BABYLON.Vector3(-250, 38, -100);\r\n      container12.scaling.z = 1;\r\n      container12.scaling.y = 1;\r\n      container12.material = redMat;\r\n\r\n      shadowGenerator.getShadowMap().renderList.push(container02, container3, container4, container5, container6, container78, container9, container10, container11, container12);\r\n      obstacles.push(container02, container3, container4, container5, container6, container78, container9, container10, container11, container12);\r\n\r\n      container.setEnabled(false);\r\n    }\r\n  );\r\n\r\n  var moveArea = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8, tessellation: 256 }, scene);\r\n  moveArea.material = invisibleMaterial;\r\n  moveArea.actionManager = moveActionManager;\r\n  moveArea.setEnabled(false);\r\n  moveArea.position = new BABYLON.Vector3(0, 26, 0);\r\n\r\n  var moveArea2 = BABYLON.MeshBuilder.CreateCylinder(\"moveArea\", { height: 0.25, diameter: miniWidth * 8 + miniWidth, tessellation: 256 }, scene);\r\n  moveArea2.material = moveAreaMat;\r\n  moveArea2.parent = moveArea;\r\n\r\n  var board;\r\n  var map;\r\n  BABYLON.SceneLoader.ImportMesh(\r\n    \"\",\r\n    \"\",\r\n    `.${publicURL}/Models/setting.babylon`,\r\n    scene,\r\n    function (newMeshes) {\r\n      board = newMeshes[0];\r\n      board.scaling = new BABYLON.Vector3(1150, 1200, 1000);\r\n      board.material = boardMaterial;\r\n      shadowGenerator.getShadowMap().renderList.push(board);\r\n\r\n      map = BABYLON.MeshBuilder.CreateBox(\"map\", { width: 808, height: 606, depth: 1 }, scene);\r\n      map.rotate(BABYLON.Axis.X, BABYLON.Tools.ToRadians(90), scene);\r\n      map.material = groundMaterial;\r\n      map.receiveShadows = true;\r\n      map.translate(BABYLON.Axis.Y, 25, scene);\r\n      map.actionManager = mapActionManager;\r\n    }\r\n  );\r\n  //board is 24 inch to 32 inch;\r\n\r\n  //Should import action tokens after switching Player\r\n  var switchPlayer = () => {\r\n    if (currentPlayer.team === \"teamWhite\") {\r\n      currentPlayer.team = \"teamBlack\";\r\n      camera.position = new BABYLON.Vector3(-700, 300, 0);\r\n      targetFurthestMini();\r\n    } else if (currentPlayer.team === \"teamBlack\") {\r\n      currentPlayer.team = \"teamWhite\";\r\n      camera.position = new BABYLON.Vector3(700, 300, 0);\r\n      targetFurthestMini();\r\n    }\r\n    importActionTokens();\r\n  };\r\n\r\n  //Mini selected by player1;\r\n  var selected = \"\";\r\n  var targets = [];\r\n  var inAttack = false;\r\n  var rotate = false;\r\n  var previous = {\r\n    position: null,\r\n    rotation: null\r\n  };\r\n\r\n  const cancelTargeting = () => {\r\n    targets.forEach(target => {\r\n      hl.removeMesh(target);\r\n      if (scene.getMeshByName(`${selected.id}To${target.id}`)) {\r\n        scene.removeMesh(scene.getMeshByName(`${selected.id}To${target.id}`));\r\n      }\r\n    });\r\n    targets = [];\r\n    if (scene.getMeshByName(\"directLOS\")) {\r\n      scene.getMeshByName(\"directLOS\").dispose();\r\n    }\r\n    players[enemyPlayer.team].minis.forEach(mini => {\r\n      if (scene.getMeshByName(`${mini.id}To${selected.id}`)) {\r\n        scene.removeMesh(scene.getMeshByName(`${mini.id}To${selected.id}`));\r\n      }\r\n      removeDiceStat(mini);\r\n      mini.diceAssigned = 0;\r\n    })\r\n    advancedTexture.removeControl(rollButton);\r\n  }\r\n\r\n  var selection = function (evt) {\r\n    //left click\r\n    if (evt.sourceEvent.which === 1) {\r\n      let currentMesh = evt.meshUnderPointer;\r\n      scene.hoverCursor = \"pointer\";\r\n      if (selected === currentMesh) {\r\n        if (targets.length === 0) {\r\n          moveAction({ skip: true });\r\n        }\r\n        //camera.setTarget(board);\r\n      } else if (currentMesh.name.includes(\"Mini\")) {\r\n        if (selected) {\r\n          hl.removeMesh(selected);\r\n        }\r\n        if (currentPlayer.turnActions > 0) {\r\n          cancelTargeting();\r\n          hl.addMesh(currentMesh, BABYLON.Color3.White());\r\n          hl.addMesh(moveArea, BABYLON.Color3.White());\r\n          selected = currentMesh;\r\n          previous.position = selected.position;\r\n          moveArea.position = new BABYLON.Vector3(currentMesh.position.x, 26, currentMesh.position.z)\r\n          moveArea.setEnabled(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelSelection = () => {\r\n    if (selected && rotate && !inAttack) {\r\n      if (previous.position) {\r\n        selected.position = previous.position;\r\n        selected.rotation = previous.rotation;\r\n        moveArea.setEnabled(true);\r\n        moveArea.position = new BABYLON.Vector3(previous.position.x, 26, previous.position.z);\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(false);\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n        }\r\n      }\r\n      canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n      rotate = false;\r\n    } else if (selected && !rotate) {\r\n      moveArea.setEnabled(false);\r\n      hl.removeMesh(selected);\r\n      hl.removeMesh(moveArea);\r\n      cancelTargeting();\r\n      scene.removeMesh(clonedMini);\r\n      scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(false);\r\n      if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n        scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n      }\r\n      targetFurthestMini();\r\n      selected = \"\";\r\n      scene.hoverCursor = \"pointer\";\r\n      if (clonedMini) {\r\n        clonedMini.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noObstacle = (mini1, mini2) => {\r\n    let origin = new BABYLON.Vector3(mini1.position.x, mini1.position.y + getHeight(mini1) * 0.75, mini1.position.z);\r\n\r\n    let targetLeft = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z - mini2.width / 2 + mini2.width * 0.25);\r\n    let targetRight = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.75, mini2.position.z + mini2.width / 2 - mini2.width * 0.25);\r\n\r\n    let directionLeft = targetLeft.subtract(origin);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = targetRight.subtract(origin);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = BABYLON.Vector3.Distance(mini1.position, mini2.position) - getWidth(mini2) / 2;\r\n\r\n    let rayLeft = new BABYLON.Ray(origin, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(origin, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\")) && hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const isInCover = (mini1, mini2) => {\r\n    let originLeft = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z - mini1.width / 2);\r\n    let originRight = new BABYLON.Vector3(mini1.position.x, mini1.position.y + 5, mini1.position.z + mini1.width / 2);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, mini2.position.y + 5, mini2.position.z);\r\n\r\n    let directionLeft = target.subtract(originLeft);\r\n    directionLeft = BABYLON.Vector3.Normalize(directionLeft);\r\n\r\n    let directionRight = target.subtract(originRight);\r\n    directionRight = BABYLON.Vector3.Normalize(directionRight);\r\n\r\n    let length = getWidth(mini1) / 2 + getWidth(mini1);\r\n\r\n    let rayLeft = new BABYLON.Ray(originLeft, directionLeft, length);\r\n    let rayRight = new BABYLON.Ray(originRight, directionRight, length);\r\n\r\n    //let rayHelperLeft = new BABYLON.RayHelper(rayLeft);\r\n    //let rayHelperRight = new BABYLON.RayHelper(rayRight);\r\n    //rayHelperLeft.show(scene);\r\n    //rayHelperRight.show(scene);\r\n\r\n    let hitsLeft = scene.multiPickWithRay(rayLeft);\r\n    let hitsRight = scene.multiPickWithRay(rayRight);\r\n\r\n    if (hitsLeft.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return true;\r\n    } else if (hitsRight.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const isInAngle = (mini1, mini2) => {\r\n    //Check here if angle forward and target < 90deg\r\n    let forward = forwardDirection(mini1);\r\n\r\n    let origin = new BABYLON.Vector3(mini1.position.x, 55, mini1.position.z);\r\n\r\n    let target = new BABYLON.Vector3(mini2.position.x, 55, mini2.position.z);\r\n\r\n    let directionTarget = target.subtract(origin);\r\n    directionTarget = BABYLON.Vector3.Normalize(directionTarget);\r\n\r\n    if (Math.acos(BABYLON.Vector3.Dot(forward, directionTarget)) * 180 / Math.PI > 90) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    };\r\n  };\r\n\r\n  const isHigher = (mini1, mini2) => {\r\n    if (mini1.position.y > mini2.position.y + getHeight(mini2)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    };\r\n  };\r\n\r\n  const whatIsUnderneath = (mini) => {\r\n    let origin = new BABYLON.Vector3(mini.position.x, mini.position.y, mini.position.z);\r\n\r\n    let direction = new BABYLON.Vector3(0, -1, 0);\r\n\r\n    let length = getHeight(mini);\r\n\r\n    let ray = new BABYLON.Ray(origin, direction, length);\r\n\r\n    let hits = scene.multiPickWithRay(ray);\r\n\r\n    if (hits.some(hit => hit.pickedMesh.name.includes(\"obstacle\"))) {\r\n      return hits.filter(hit => hit.pickedMesh.name.includes(\"obstacle\")).map(hit => hit.pickedMesh)[0]\r\n    } else if (hits.some(hit => hit.pickedMesh.name.includes(\"map\"))) {\r\n      return hits.filter(hit => hit.pickedMesh.name.includes(\"map\")).map(hit => hit.pickedMesh)[0]\r\n    }\r\n  };\r\n\r\n  var handleCoverLogo = (mini1, mini2) => {\r\n    if (isInCover(mini1, mini2)) {\r\n      scene.getMeshByName(`${mini1.id}shield`).setEnabled(true);\r\n    }\r\n    if (isInCover(mini2, mini1)) {\r\n      scene.getMeshByName(`${mini2.id}shield`).setEnabled(true);\r\n    }\r\n  };\r\n  \r\n  /*var removeCoverLogo = (mini) => {\r\n    if (scene.getMeshByName(`${mini.id}shield`)){\r\n      scene.getMeshByName(`${mini.id}shield`).setEnabled(false);\r\n    }\r\n  }*/\r\n\r\n  var handleLineOfSight = (ev) => {\r\n    var enemyTarget = ev.meshUnderPointer;\r\n    if (selected && rangeToTarget(selected, enemyTarget)) {\r\n      handleCoverLogo(selected, enemyTarget);\r\n      if (enemyTarget.intersectsMesh(selected, false)) {\r\n        //Melee position\r\n        //scene.hoverCursor = \"url('./Cursors/melee.cur') 10 10, auto\";\r\n\r\n      } else if (rangeToTarget(selected, enemyTarget)) {\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(true)\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n        }\r\n        moveArea.setEnabled(false);\r\n\r\n        //In range position\r\n        //scene.hoverCursor = \"url('./Cursors/aim.cur'), auto\";\r\n      } else if (!enemyTarget.intersectsMesh(selected, false) && !rangeToTarget(selected, enemyTarget)) {\r\n        //scene.hoverCursor = \"url('./Cursors/unavailable.cur') 15 15, auto\";\r\n        moveArea.setEnabled(false);\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(true)\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var cancelLineOfSight = () => {\r\n    if (selected) {\r\n      scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(false);\r\n      scene.getMeshByName(`${selected.id}shield`).setEnabled(false);\r\n      players[enemyPlayer.team].minis.forEach(mini => scene.getMeshByName(`${mini.id}lineOfSight`).setEnabled(false));\r\n      if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n        scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n      }\r\n      if (!rotate && targets.length === 0) {\r\n        moveArea.setEnabled(true);\r\n      }\r\n    }\r\n    scene.hoverCursor = \"pointer\";\r\n  }\r\n\r\n  var targetFurthestMini = () => {\r\n    if (players[currentPlayer.team].minis && players[currentPlayer.team].minis.length > 0) {\r\n      var miniPosition = players[currentPlayer.team].minis.map(mini => mini.position.x);\r\n      var furthestMiniIndex = currentPlayer.team === \"teamWhite\" ? miniPosition.indexOf(Math.min(...miniPosition)) : miniPosition.indexOf(Math.max(...miniPosition));\r\n      var furthestMini = players[currentPlayer.team].minis[furthestMiniIndex];\r\n      var furthestTarget = BABYLON.Mesh.CreateSphere(\"targetSphere\", { size: 10 }, scene);\r\n      furthestTarget.setEnabled(false);\r\n      furthestTarget.position = new BABYLON.Vector3(furthestMini.position.x, furthestMini.position.y + 30, 0);\r\n      camera.setTarget(furthestTarget);\r\n      setTimeout(() => {\r\n        furthestTarget.dispose();\r\n      }, 1100)\r\n    }\r\n  };\r\n\r\n  var diceRoll = (rolls) => {\r\n    let arrayResult = [];\r\n    for (let i = 0; i < rolls; i++) {\r\n      arrayResult.push(Math.floor(Math.random() * 6) + 1)\r\n    }\r\n\r\n    return arrayResult;\r\n  }\r\n\r\n  var cloneDice = (rolls, mini, delay, save) => {\r\n    var dicePosition1 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 30)\r\n    var dicePosition2 = new BABYLON.Vector3(mini.position.x + 10, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition3 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition4 = new BABYLON.Vector3(mini.position.x + -5, mini.position.y + 7, mini.position.z + 45)\r\n    var dicePosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 30)\r\n    var diceOddPosition5 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 37.5)\r\n\r\n    var dicePosition6 = new BABYLON.Vector3(mini.position.x + -20, mini.position.y + 7, mini.position.z + 45)\r\n\r\n    var dicePositions = [dicePosition1, dicePosition2, dicePosition3, dicePosition4, dicePosition5, dicePosition6];\r\n\r\n    for (let i = 0; i < rolls.length; i++) {\r\n      var diceIndex = i + 1\r\n      if (save) {\r\n        dice[rolls[i] - 1].material = diceMatRed;\r\n      } else if (mini.name.includes(\"white\")) {\r\n        dice[rolls[i] - 1].material = diceMatWhite;\r\n      } else if (mini.name.includes(\"black\")) {\r\n        dice[rolls[i] - 1].material = diceMatBlack;\r\n      }\r\n\r\n      if (rolls.length === 3 && diceIndex === 3) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition3;\r\n      } else if (rolls.length === 5 && diceIndex === 5) {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = diceOddPosition5;\r\n      } else {\r\n        dice[rolls[i] - 1].clone(`diceClone${i}`).position = dicePositions[i];\r\n      }\r\n\r\n      setTimeout(function () {\r\n        scene.removeMesh(scene.getMeshByName(`diceClone${i}`));\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  var compareRolls = (mini1, mini1Rolls, mini1Mod, mini2, mini2Rolls, mini2Mod) => {\r\n    //check if rolls successful, remove any unsuccessful rolls\r\n    var mini1Success = mini1Rolls.filter(roll => roll + mini1Mod >= players[mini1.team].armyStats.units.soldier.range.success);\r\n    var mini2Success = mini2Rolls.filter(roll => roll + mini2Mod >= players[mini2.team].armyStats.units.soldier.defense.success);\r\n\r\n    console.log(\"Player rolls:\");\r\n    console.log(mini1Rolls);\r\n    console.log(\"He has a \" + mini1Mod + \" modifier to dice roll\");\r\n\r\n\r\n    console.log(\"Enemy rolls:\");\r\n    console.log(mini2Rolls);\r\n    console.log(\"He has a \" + mini2Mod + \" modifier to dice roll\");\r\n\r\n    console.log(\"Player success rolls:\")\r\n    console.log(mini1Success);\r\n\r\n    console.log(\"Enemy Success rolls:\")\r\n    console.log(mini2Success);\r\n\r\n    //check if duplicates, remove duplicates player enemy\r\n    for (let i = 0; i < mini1Success.length; i++) {\r\n      for (let j = 0; j < mini2Success.length; j++) {\r\n        if (mini1Success[i] === mini2Success[j]) {\r\n          mini1Success.splice(i, 1);\r\n          mini2Success.splice(j, 1)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Math.max(...mini1Success) > Math.max(...mini2Success)) {\r\n      //player with the highest numbers win.   \r\n      console.log(`${mini1.id} wins with a higher roll!`);\r\n      return mini1.name;\r\n    } else if (Math.max(...mini2Success) > Math.max(...mini1Success)) {\r\n      console.log(`${mini2.id} wins with a higher roll!`);\r\n      return mini2.name;\r\n    } else {\r\n      //if no result left or equal, both miss.\r\n      return null\r\n    }\r\n  }\r\n\r\n  var rangeToTarget = (mini1, mini2) => {\r\n    let rangeResult;\r\n\r\n    let distance = BABYLON.Vector3.Distance(mini1.position, mini2.position) - mini2.width / 2;\r\n    let mini1Team = mini1.name === \"whiteMini\" ? \"teamWhite\" : \"teamBlack\";\r\n    let mini1MaxRange = players[mini1Team].armyStats.units[mini1.unit].maxRange\r\n    //close combat if minis base are within 1 inch\r\n    if (distance <= mini1.width / 2 + mini2.width / 2) {\r\n      rangeResult = \"c\";\r\n      //8 inches\r\n    } else if (distance <= 202) {\r\n      rangeResult = \"s\";\r\n      // between 8 and 16 inches\r\n    } else if (distance > 202 && distance <= 404) {\r\n      rangeResult = \"m\";\r\n      // between 16 and 32 inches\r\n    } else if (distance > 404 && distance <= 808) {\r\n      rangeResult = \"l\";\r\n      // between 32 and max range\r\n    } else if (distance > 808 && distance <= mini1MaxRange) {\r\n      rangeResult = \"xl\";\r\n    } else if (distance > mini1MaxRange) {\r\n      rangeResult = null\r\n    }\r\n\r\n    //check if obstacles between minis;\r\n    //check if angle between mini1 front and mini2 is < 90deg\r\n    if (noObstacle(mini1, mini2) && isInAngle(mini1, mini2)) {\r\n      return rangeResult;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  var isTheGameOver = () => {\r\n    let winner = \"\";\r\n    if (players.teamBlack.startActions === 0 && players.teamWhite.startActions === 0) {\r\n      console.log(\"tie\")\r\n      winner = null;\r\n      console.log(\"Game Over. No Winners this time.\")\r\n    } else if (players.teamBlack.startActions === 0) {\r\n      winner = \"Team White\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else if (players.teamWhite.startActions === 0) {\r\n      winner = \"Team Black\";\r\n      console.log(`Game Over. ${winner} wins!`)\r\n    } else {\r\n      winner = undefined;\r\n    }\r\n\r\n    return winner;\r\n  }\r\n\r\n  var getMods = (mini1, mini2) => {\r\n    let team = mini1.name.includes(\"white\") ? \"teamWhite\" : \"teamBlack\";\r\n    let range = rangeToTarget(mini1, mini2);\r\n    let higherMod = isHigher(mini1, mini2) ? 1 : 0;\r\n    let coverMod = isInCover(mini2, mini1) ? -1 : 0;\r\n    let mods = coverMod + higherMod + players[team].armyStats.units[mini1.unit].range.mods[range];\r\n    return mods;\r\n  }\r\n\r\n  var onAttack = (mini1, mini2, response) => {\r\n    let winner = \"\";\r\n    if (mini1) {\r\n      let range = rangeToTarget(mini1, mini2);\r\n      let mini1CoverMod = isInCover(mini1, mini2) ? 1 : 0;\r\n      let mini1Mods = getMods(mini1, mini2);\r\n\r\n      let mini2CoverMod = isInCover(mini2, mini1) ? 1 : 0;\r\n      let mini2Mods = getMods(mini2, mini1);\r\n\r\n      if (range && isInAngle(mini1, mini2)) {\r\n        if (mini2.intersectsMesh(mini1, false) || range === \"c\") {\r\n          //Melee attack\r\n          console.log('Stabbing ' + mini2.id + \" with \" + mini1.id)\r\n          console.log(\"Player target roll: \" + currentPlayer.army.units[mini1.unit].melee.success + \"+\")\r\n          let meleeRoll = diceRoll(currentPlayer.army.units[mini1.unit].melee.roll);\r\n\r\n          //Generate Dice\r\n          cloneDice(meleeRoll, mini1, 1000);\r\n\r\n          console.log(\"Enemy target roll: \" + enemyPlayer.army.units[mini1.unit].melee.success + \"+\")\r\n          let mini2MeleeRoll = diceRoll(1);\r\n          //Generate Dice\r\n          cloneDice(mini2MeleeRoll, mini2, 1000);\r\n\r\n          winner = compareRolls(mini1, meleeRoll, 0, mini2, mini2MeleeRoll, 0);\r\n\r\n        } else {\r\n          //Range attack\r\n          var mini1rolls = [];\r\n          var modedRolls = [];\r\n          var mini2Rolls = [];\r\n\r\n          console.log(`Shooting ${mini2.id} with ${mini1.id} at range ${range}.`)\r\n          // Check for enemy roll (Should be enemy line of sight when rotation is implemented!)\r\n          console.log(mini1.id + \" target roll: \" + currentPlayer.army.units[mini1.unit].range.success + \"+\")\r\n\r\n          if (!response) {\r\n            mini1rolls = diceRoll(mini2.diceAssigned);\r\n          } else {\r\n            mini1rolls = diceRoll(1);\r\n          }\r\n\r\n          //Generate Dice\r\n          cloneDice(mini1rolls, mini1, 1000);\r\n\r\n          modedRolls = mini1rolls.map(roll => roll + mini1Mods);\r\n\r\n          //Enemy Target Response\r\n          if (rangeToTarget(mini2, mini1) && !response) {\r\n            console.log(mini2.id + \" target roll: \" + enemyPlayer.army.units[mini2.unit].range.success + \"+\")\r\n\r\n            mini2Rolls = diceRoll(1);\r\n            //Generate Dice\r\n            cloneDice(mini2Rolls, mini2, 1000);\r\n\r\n            winner = compareRolls(mini1, mini1rolls, mini1Mods, mini2, mini2Rolls, mini2Mods);\r\n          }\r\n\r\n          //No response from enemy (range difference || angle || one way response)\r\n          if (!winner) {\r\n            if (modedRolls.some(roll => roll >= currentPlayer.army.units[mini1.unit].range.success)) {\r\n              if (!response) {\r\n                console.log(\"Player rolled:\")\r\n                console.log(mini1rolls);\r\n                console.log(\"Success! You shot him!\");\r\n              } else {\r\n                console.log(\"Enemy rolled:\")\r\n                console.log(mini1rolls);\r\n                console.log(\"Hot damn! You got shot!\");\r\n              }\r\n              winner = mini1.name;\r\n            }\r\n          }\r\n        }\r\n\r\n        //Defense Roll\r\n        if (winner === mini1.name) {\r\n          console.log(mini2.id + \" is hit. Defense roll target: \" + players[mini2.team].armyStats.units[mini2.unit].defense.success + \"+\");\r\n          if (mini2CoverMod > 0) {\r\n            console.log(mini2.id + \" has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(players[mini2.team].armyStats.units[mini2.unit].defense.roll)\r\n          console.log(mini2.team + \" player rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, mini2, 1250, true);\r\n          }, 1250);\r\n          //Cover modifiers to add here\r\n          if (defenseRoll.some(roll => roll + mini2CoverMod >= players[mini2.team].armyStats.units[mini2.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. \" + mini2.id + \" saved!\");\r\n          } else {\r\n            console.log(mini2.id + \" killed!\");\r\n            setTimeout(function () {\r\n              mini2.position = new BABYLON.Vector3(Math.floor(Math.random() * 190) - 200, 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              mini2.name = \"decor\";\r\n              mini2.isPickable = false;\r\n              if (scene.getMeshByName(`${mini2.id}To${mini1.id}`)) {\r\n                scene.removeMesh(scene.getMeshByName(`${mini2.id}To${mini1.id}`));\r\n              }\r\n              players[mini2.team].minis = players[mini2.team].minis.filter(mini => mini.id !== mini2.id)\r\n              players[mini2.team].startActions -= 2\r\n              clearTarget(mini2);\r\n              if (response) {\r\n                cancelSelection();\r\n              }\r\n            }, 2500);\r\n          }\r\n        } else if (winner === mini2.name) {\r\n          console.log(mini1.id + \" is hit. Defense roll target: \" + players[mini1.team].armyStats.units[mini1.unit].defense.success + \"+\")\r\n          if (mini1CoverMod > 0) {\r\n            console.log(mini1.id + \" has +1 to dice roll as he is in cover.\")\r\n          }\r\n          let defenseRoll = diceRoll(players[mini1.team].armyStats.units[mini1.unit].defense.roll, null, true, mini1);\r\n          console.log(mini1.team + \" player rolls : \");\r\n          console.log(defenseRoll);\r\n          setTimeout(function () {\r\n            cloneDice(defenseRoll, mini1, 1250, true);\r\n          }, 1250);\r\n          if (defenseRoll.some(roll => roll + mini1CoverMod >= players[mini1.team].armyStats.units[mini1.unit].defense.success)) {\r\n            console.log(\"Defense roll successful. \" + mini1.id + \" saved!\");\r\n          } else {\r\n            console.log(mini1.id + \" killed!\");\r\n            setTimeout(function () {\r\n              camera.target = map;\r\n              mini1.position = new BABYLON.Vector3(200 - Math.floor(Math.random() * 190), 0, -440 + Math.floor(Math.random() * 30) - 15);\r\n              mini1.name = \"decor\";\r\n              mini1.isPickable = false\r\n              players[mini1.team].minis = players[mini1.team].minis.filter(mini => mini.id !== mini1.id)\r\n              players[mini1.team].startActions -= 2\r\n              cancelSelection();\r\n            }, 2500);\r\n          }\r\n        } else {\r\n          console.log(\"No winners! Try again.\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const attackTargets = async () => {\r\n    inAttack = true;\r\n    const waitFor = (ms) => new Promise(r => setTimeout(r, ms));\r\n    if (selected && targets && targets.length > 0) {\r\n      let enemyResponse = players[enemyPlayer.team].minis.filter(mini =>\r\n        enemyPlayer.army.units[mini.unit].range.mods[rangeToTarget(mini, selected)] >= 0\r\n      );\r\n      let onWayResponse = enemyResponse.filter(enemy => !targets.some(target => target === enemy));\r\n\r\n      await asyncForEach(targets, async (target) => {\r\n        console.log(`Init attack on ${target.id}!`)\r\n        if (selected) {\r\n          onAttack(selected, target);\r\n        }\r\n        await waitFor(3000);\r\n        console.log(`Attack on ${target.id} completed!`)\r\n      });\r\n      if (onWayResponse) {\r\n        await asyncForEach(onWayResponse, async (enemy) => {\r\n          console.log(`Init one way attack from ${enemy.id}!`)\r\n          if (selected) {\r\n            onAttack(enemy, selected, true);\r\n          }\r\n          await waitFor(3000);\r\n          console.log(`One way attack from ${enemy.id} completed!`)\r\n        });\r\n      }\r\n      console.log('Done with attacks.');\r\n      players[currentPlayer.team].turnActions -= 1;\r\n      scene.removeMesh(scene.getMeshByName(\"token\"));\r\n      cancelLineOfSight();\r\n      cancelSelection();\r\n      isTheGameOver();\r\n      inAttack = false;\r\n\r\n      if (players[currentPlayer.team].turnActions === 0) {\r\n        setTimeout(function () {\r\n          switchPlayer();\r\n        }, 3500);\r\n      }\r\n    }\r\n  }\r\n\r\n  var rollButton = GUI.Button.CreateSimpleButton(\"rollButton\", \"Roll Dice\");\r\n  rollButton.width = \"120px\"\r\n  rollButton.height = \"60px\";\r\n  rollButton.color = \"white\";\r\n  rollButton.left = \"40%\";\r\n  rollButton.top = \"30%\";\r\n  rollButton.cornerRadius = 20;\r\n  rollButton.background = \"black\";\r\n  rollButton.zIndex = 2000;\r\n  rollButton.onPointerClickObservable.add(function () {\r\n    if (!inAttack) {\r\n      attackTargets();\r\n    }\r\n  });\r\n\r\n  var moveAction = ({ skip }) => {\r\n    if (selected) {\r\n      if (!skip) {\r\n        previous.position = selected.position;\r\n        selected.position = clonedMini.position;\r\n      }\r\n      moveArea.position = new BABYLON.Vector3(selected.position.x, 26, selected.position.z);\r\n      moveArea.setEnabled(false);\r\n      scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(true);\r\n\r\n      //Fragment diffuse on main LOS and creating ground LOS clone\r\n      if (whatIsUnderneath(selected) && whatIsUnderneath(selected).name.includes(\"obstacle\")) {\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).position.y = - selected.position.y + 26;\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(true);\r\n        } else {\r\n          scene.getMeshByName(`${selected.id}lineOfSight`).clone(`groundLOS${selected.id}`).position.y = - selected.position.y + 26;\r\n        }\r\n\r\n        if (scene.getMeshByName(\"groundMoveArea\")) {\r\n          scene.getMeshByName(\"groundMoveArea\").position.y = selected.position.y - getHeight(selected) / 2 - 5;\r\n        } else {\r\n          moveArea.clone(\"groundMoveArea\");\r\n          scene.getMeshByName(\"groundMoveArea\").parent = moveArea;\r\n          scene.getMeshByName(\"groundMoveArea\").position = new BABYLON.Vector3(0, selected.position.y - getHeight(selected) / 2 - 5, 0);\r\n        }\r\n\r\n        let obstacleTemplateArea = `if( vPositionW.z  < ${Math.round(whatIsUnderneath(selected).position.z - getLength(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.z  > ${Math.round(whatIsUnderneath(selected).position.z + getLength(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.x  > ${Math.round(whatIsUnderneath(selected).position.x + getWidth(whatIsUnderneath(selected)) / 2)}.){ discard; } if( vPositionW.x  < ${Math.round(whatIsUnderneath(selected).position.x - getWidth(whatIsUnderneath(selected)) / 2)}.){ discard; }`;\r\n        let highMat = new CustomMaterial(\"highMat\", scene);\r\n        highMat.alpha = 0.25;\r\n        highMat.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n        highMat.diffuseColor = scene.getMaterialByName(selected.losMat[0]).diffuseColor;\r\n\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).material = highMat;\r\n        scene.getMeshByName(`${selected.id}lineOfSight`)._children.forEach((los, index) => {\r\n          los.material = new CustomMaterial(`highMat${index}`, scene);\r\n          los.material.alpha = 0.25;\r\n          los.material.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n          los.material.diffuseColor = scene.getMaterialByName(selected.losMat[index + 1]).diffuseColor;\r\n        });\r\n        scene.getMeshByName(\"groundMoveArea\").material = new CustomMaterial(`highMoveMat`, scene);\r\n        scene.getMeshByName(\"groundMoveArea\").material.alpha = 0.25;\r\n        scene.getMeshByName(\"groundMoveArea\").material.Fragment_Custom_Diffuse(obstacleTemplateArea);\r\n        scene.getMeshByName(\"groundMoveArea\")._children.forEach(child => child.setEnabled(false));\r\n      } else {\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).material = scene.getMaterialByName(selected.losMat[0]);\r\n        scene.getMeshByName(`${selected.id}lineOfSight`)._children.forEach((los, index) => los.material = scene.getMaterialByName(selected.losMat[index + 1]));\r\n        moveArea2.material = moveAreaMat;\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).dispose();\r\n        }\r\n        if (scene.getMeshByName(\"groundMoveArea\")) {\r\n          scene.getMeshByName(\"groundMoveArea\").dispose();\r\n        }\r\n      };\r\n\r\n      previous.rotation = selected.rotation.clone();\r\n      rotate = true;\r\n    }\r\n  }\r\n\r\n  var forwardDirection = (mini) => {\r\n    let forward = new BABYLON.Vector3(0, 0, -1);\r\n    let direction = mini.getDirection(forward);\r\n    direction.normalize();\r\n    return direction;\r\n  }\r\n\r\n  var rotateOnMouseMove = (evt) => {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      var diffX = selected.position.x - getGroundPosition(evt).x;\r\n      var diffY = selected.position.z - getGroundPosition(evt).z;\r\n      selected.rotation.y = Math.atan2(diffX, diffY);\r\n    }\r\n  }\r\n\r\n  var rotateAction = (evt) => {\r\n    if (evt.which === 1 || evt.sourceEvent.which === 1) {\r\n      if (selected && rotate) {\r\n        players[currentPlayer.team].turnActions -= 1;\r\n        scene.removeMesh(scene.getMeshByName(\"token\"));\r\n        rotate = false;\r\n        previous.position = null;\r\n        previous.rotation = null;\r\n        cancelSelection();\r\n\r\n        if (players[currentPlayer.team].turnActions === 0) {\r\n          setTimeout(function () {\r\n            switchPlayer();\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var onMouseMove = function (evt) {\r\n    evt.preventDefault();\r\n    if (selected && getGroundPosition(evt)) {\r\n      let otherMinis = [...players[enemyPlayer.team].minis, ...players[currentPlayer.team].minis.filter(mini => mini.id !== selected.id)];\r\n      //Miniature collision\r\n      if (!otherMinis.some(mini =>\r\n        getGroundPosition(evt).x < mini.position.x + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).x > mini.position.x - getWidth(mini) + 2 &&\r\n        getGroundPosition(evt).z < mini.position.z + getWidth(mini) - 2 &&\r\n        getGroundPosition(evt).z > mini.position.z - getWidth(mini) + 2\r\n      )) {\r\n        //Obstacle collision\r\n        if (\r\n          !obstacles.filter(obstacle => getHeight(obstacle) + obstacle.position.y - (getHeight(obstacle) / 2) > getHeight(selected) + selected.position.y).some(obstacle =>\r\n            getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n            getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n          )\r\n        ) {\r\n          //game area limits\r\n          if (getGroundPosition(evt).x > -388 && getGroundPosition(evt).x < 388 && getGroundPosition(evt).z > -285 && getGroundPosition(evt).z < 285) {\r\n            //Filtering out obstacles shorter than mini size. Allows vertical move.\r\n            var currentObstacle = obstacles.filter(obstacle => getHeight(obstacle) < getHeight(selected) + selected.position.y - 25).filter(obstacle =>\r\n              getGroundPosition(evt).x < obstacle.position.x + getWidth(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).x > obstacle.position.x - getWidth(obstacle) / 2 - getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z < obstacle.position.z + getLength(obstacle) / 2 + getWidth(selected) / 2 &&\r\n              getGroundPosition(evt).z > obstacle.position.z - getLength(obstacle) / 2 - getWidth(selected) / 2\r\n            );\r\n            if (currentObstacle && currentObstacle.length > 0) {\r\n              //Vertical move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, getHeight(currentObstacle[0]) + 25, getGroundPosition(evt).z);\r\n            } else {\r\n              //Regular move\r\n              clonedMini.position = new BABYLON.Vector3(getGroundPosition(evt).x, 25, getGroundPosition(evt).z);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var getGroundPosition = function () {\r\n    // Use a predicate to get position on the ground\r\n    var pickinfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) { return mesh === map; });\r\n    if (pickinfo.hit) {\r\n      return pickinfo.pickedPoint;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  const addTarget = (enemyTarget) => {\r\n    advancedTexture.addControl(rollButton);\r\n    updateDiceStat();\r\n    let targetColor = new BABYLON.Color3.Black();\r\n    if (selected && !targets.some(target => target.id === enemyTarget.id)) {\r\n      if (getLosColor(selected.unit, currentPlayer.team, rangeToTarget(selected, enemyTarget))) {\r\n        targetColor = getLosColor(selected.unit, currentPlayer.team, rangeToTarget(selected, enemyTarget));\r\n      }\r\n      hl.addMesh(enemyTarget, targetColor);\r\n      targets.push(enemyTarget);\r\n      // create direct line of sight\r\n      if (rangeToTarget(selected, enemyTarget) !== \"c\") {\r\n        createDirectLOS(selected, enemyTarget, false);\r\n      }\r\n      createDiceStat(enemyTarget);\r\n      targetResponse();\r\n    }\r\n  }\r\n\r\n  const clearTarget = (target) => {\r\n    if (target) {\r\n      target.diceAssigned = 0;\r\n    }\r\n    // Removed any target from the targets array with 0 dice assigned\r\n    targets.forEach((target, index) => {\r\n      if (target.diceAssigned === 0) {\r\n        targets.splice(index, 1);\r\n        hl.removeMesh(target);\r\n        removeDiceStat(target);\r\n        scene.removeMesh(scene.getMeshByName(`${selected.id}To${target.id}`));\r\n      }\r\n    });\r\n  }\r\n\r\n  const createDiceStat = (enemyTarget) => {\r\n    let roll = enemyTarget.diceAssigned;\r\n    let mods;\r\n    let success;\r\n    if (rangeToTarget(selected, enemyTarget) === \"c\") {\r\n      success = currentPlayer.army.units.soldier.melee.success;\r\n    } else {\r\n      mods = getMods(selected, enemyTarget);\r\n      success = currentPlayer.army.units.soldier.range.success - mods\r\n    }\r\n\r\n    let diceStat = new GUI.TextBlock(`${enemyTarget.id}diceStat`);\r\n    diceStat.text = `${roll}d${success}+`;\r\n    diceStat.color = \"white\";\r\n    diceStat.fontFamily = \"Arial\";\r\n    diceStat.fontSize = \"15px\";\r\n    advancedTexture.addControl(diceStat);\r\n\r\n    diceStat.linkWithMesh(enemyTarget);\r\n    diceStat.linkOffsetY = -40;\r\n  };\r\n\r\n  const removeDiceStat = (enemyTarget) => {\r\n    if (getControlByName(`${enemyTarget.id}diceStat`)) {\r\n      getControlByName(`${enemyTarget.id}diceStat`).dispose();\r\n    }\r\n  };\r\n\r\n  const updateDiceStat = () => {\r\n    if (targets && targets.length > 0) {\r\n      targets.forEach(target => {\r\n        removeDiceStat(target);\r\n        createDiceStat(target);\r\n      });\r\n    }\r\n  }\r\n\r\n  const assignTarget = (ev) => {\r\n    let enemyTarget = ev.meshUnderPointer;\r\n\r\n    var whoHasMoreDice = targets.map(target => target.diceAssigned).indexOf(Math.max(...targets.filter(target => target.id !== enemyTarget.id).map(target => target.diceAssigned)));\r\n    if (selected && enemyTarget && enemyTarget.name.includes(\"Mini\") && noObstacle(selected, enemyTarget) && rangeToTarget(selected, enemyTarget)) {\r\n      moveArea.setEnabled(false);\r\n      if (targets.length === 0) {\r\n        enemyTarget.diceAssigned = currentPlayer.army.units[selected.unit].range.roll;\r\n        addTarget(enemyTarget);\r\n      } else if (whoHasMoreDice >= 0 && targets.reduce((acc, target) => acc + target.diceAssigned, 0) === currentPlayer.army.units[selected.unit].range.roll && targets.filter(target => target.id !== enemyTarget.id).every(target => target.diceAssigned >= 1)) {\r\n        enemyTarget.diceAssigned ? enemyTarget.diceAssigned += 1 : enemyTarget.diceAssigned = 1;\r\n        targets[whoHasMoreDice].diceAssigned -= 1;\r\n        addTarget(enemyTarget);\r\n        clearTarget();\r\n      } else {\r\n        if (targets.length > 1 && targets.every(target => target.diceAssigned === 1)) {\r\n          let removedTarget = targets.splice(targets.indexOf(targets[whoHasMoreDice]), 1)[0];\r\n          clearTarget(removedTarget);\r\n          enemyTarget.diceAssigned ? enemyTarget.diceAssigned += 1 : enemyTarget.diceAssigned = 1;\r\n          addTarget(enemyTarget);\r\n        }\r\n        if (enemyTarget.diceAssigned === currentPlayer.army.units[selected.unit].range.roll) {\r\n          clearTarget(enemyTarget);\r\n          cancelTargeting();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const createDirectLOS = (mini1, mini2, response) => {\r\n    let origin;\r\n    let target;\r\n    if (response) {\r\n      origin = new BABYLON.Vector3(mini1.position.x, mini1.position.y + getHeight(mini1) * 0.70, mini1.position.z);\r\n      target = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.70, mini2.position.z);\r\n      let colorArray1 = [new BABYLON.Color4(215 / 255, 195 / 255, 58 / 255, 1), new BABYLON.Color4(0, 0, 0, 0)];\r\n      BABYLON.MeshBuilder.CreateLines(`${mini1.id}To${mini2.id}`, { points: [origin, target], colors: colorArray1, updatable: true }, scene);\r\n    } else {\r\n      origin = new BABYLON.Vector3(mini1.position.x, mini1.position.y + getHeight(mini1) * 0.80, mini1.position.z);\r\n      target = new BABYLON.Vector3(mini2.position.x, mini2.position.y + getHeight(mini2) * 0.80, mini2.position.z);\r\n      let colorArray2 = [new BABYLON.Color4(1, 1, 1, 1), new BABYLON.Color4(0, 0, 0, 0)]\r\n      BABYLON.MeshBuilder.CreateLines(`${mini1.id}To${mini2.id}`, { points: [origin, target], colors: colorArray2, updatable: true }, scene);\r\n    }\r\n  }\r\n\r\n  const targetResponse = () => {\r\n    if (selected && targets) {\r\n      players[enemyPlayer.team].minis.forEach(mini => {\r\n        if (!scene.getMeshByName(`${mini.id}To${selected.id}`)) {\r\n          if (enemyPlayer.army.units[mini.unit].range.mods[rangeToTarget(mini, selected)] >= 0 || scene.getMeshByName(`${selected.id}To${mini.id}`)) {\r\n            createDirectLOS(mini, selected, true);\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      clonedMini = selected.clone();\r\n      clonedMini.position = selected.position;\r\n      clonedMini.isPickable = false;\r\n      clonedMini._children.forEach(child => child.setEnabled(false));\r\n\r\n      clonedMini.material = transparentMaterial;\r\n      canvas.addEventListener(\"mousemove\", onMouseMove, false);\r\n      canvas.addEventListener(\"click\", moveAction, false);\r\n    })\r\n  );\r\n\r\n  moveActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      clonedMini.dispose();\r\n      canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n      canvas.removeEventListener(\"click\", moveAction);\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (selected && rotate) {\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(true)\r\n      }\r\n      if (rotate) {\r\n        canvas.addEventListener(\"mousemove\", rotateOnMouseMove, false);\r\n        canvas.addEventListener(\"click\", rotateAction, false);\r\n      }\r\n    })\r\n  );\r\n\r\n  mapActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (selected && !rotate) {\r\n        scene.getMeshByName(`${selected.id}lineOfSight`).setEnabled(false);\r\n        if (scene.getMeshByName(`groundLOS${selected.id}`)) {\r\n          scene.getMeshByName(`groundLOS${selected.id}`).setEnabled(false);\r\n        }\r\n      }\r\n      canvas.removeEventListener(\"mousemove\", rotateOnMouseMove);\r\n      canvas.removeEventListener(\"click\", rotateAction);\r\n    })\r\n  );\r\n\r\n  //Select current player mini\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\" && !inAttack) {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\" && !rotate && !inAttack) {\r\n        //onAttack(ev);\r\n        assignTarget(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  //LOS on opposite team\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\" && !inAttack) {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamBlackActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\") {\r\n        cancelLineOfSight();\r\n      }\r\n    })\r\n  );\r\n\r\n\r\n  //Select current player mini\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickUpTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamWhite\" && !inAttack) {\r\n        if (rotate) {\r\n          rotateAction(ev);\r\n        } else {\r\n          selection(ev);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  //Attack opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnLeftPickTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\" && !rotate) {\r\n        //onAttack(ev);\r\n        assignTarget(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  //LOS on opposite team\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\" && !inAttack) {\r\n        handleLineOfSight(ev);\r\n      }\r\n    })\r\n  );\r\n\r\n  teamWhiteActionManager.registerAction(\r\n    new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (ev) {\r\n      if (currentPlayer.team === \"teamBlack\") {\r\n        cancelLineOfSight();\r\n      }\r\n    })\r\n  );\r\n\r\n  canvas.addEventListener('contextmenu', cancelSelection, false);\r\n  scene.onDispose = function () {\r\n    canvas.removeEventListener(\"mousemove\", onMouseMove);\r\n    canvas.removeEventListener(\"contextmenu\", cancelSelection);\r\n  }\r\n}\r\n\r\nexport default () => (\r\n  <div >\r\n    <SceneComponent className=\"w-full h-full\" antialias onSceneReady={onSceneReady} id='my-canvas' />\r\n  </div>\r\n)","import React from 'react';\nimport './App.css';\nimport Scene from './components/Scene';\n\nconst App = () => (\n  <div className=\"w-full h-full overflow-hidden\">\n    <Scene />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}